import asyncio
import logging
import random
import time
from datetime import datetime
from typing import List, Optional, Set, Callable, Any, Dict
import os

logger = logging.getLogger(__name__)

try:
    from telethon import TelegramClient, events
    from telethon.errors import ChannelPrivateError, ChatWriteForbiddenError, FloodWaitError, UserNotParticipantError, UserNotMutualContactError
    from telethon.tl.types import Channel, Chat, MessageMediaPhoto, MessageMediaDocument
    from telethon.tl.functions.channels import JoinChannelRequest, LeaveChannelRequest, GetFullChannelRequest
    from telethon.tl.functions.messages import SendReactionRequest, GetAvailableReactionsRequest, GetDiscussionMessageRequest, GetRepliesRequest
    from telethon.tl.types import ReactionEmoji, ReactionCustomEmoji
    import g4f
except ImportError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫: {e}")
    raise

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
masslooking_active = False
shared_client: Optional[TelegramClient] = None
settings = {}
processed_channels: Set[str] = set()
masslooking_progress = {'current_channel': '', 'processed_count': 0}
statistics = {
    'comments_sent': 0,
    'reactions_set': 0,
    'channels_processed': 0,
    'errors': 0,
    'flood_waits': 0,
    'total_flood_wait_time': 0
}

# –ö—Ä—É–≥–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
channel_processing_queue = {}
current_channel_iterator = None
channels_in_rotation = []

# –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
first_subscription_made = False

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
new_post_tracking_active = False
tracked_channels = {}  # {username: {'entity_id': id, 'last_message_id': id}}
user_clients = {}
user_settings = {}
user_processed_channels = {}
user_statistics = {}
user_masslooking_active = {}
user_channel_processing_queue = {}
user_tracked_channels = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ FloodWait
FLOOD_WAIT_SETTINGS = {
    'max_retries': 5,
    'max_wait_time': 7200,
    'enable_exponential_backoff': True,
    'check_interval': 10,
    'backoff_multiplier': 1.5
}

# –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è Telegram
DEFAULT_POSITIVE_REACTIONS = [
    'üëç', '‚ù§Ô∏è', 'üî•', 'ü•∞', 'üëè', 'üòç', 'ü§©', 'üíØ', '‚≠ê',
    'üéâ', 'üôè', 'üí™', 'üëå', '‚ú®', 'üåü', 'üöÄ'
]

def check_bot_running(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é settings
        import bot_interface
        import asyncio
        
        # –ü–æ–ª—É—á–∞–µ–º event loop –±–µ–∑–æ–ø–∞—Å–Ω–æ
        try:
            loop = asyncio.get_event_loop()
        except RuntimeError:
            return user_masslooking_active.get(user_id, False)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user_session = loop.run_until_complete(bot_interface.db.load_user_session(user_id))
            is_running = user_session.get('is_running', False)
            logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –ë–î: is_running={is_running}")
            return is_running
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –ë–î: {e}")
            # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            return user_masslooking_active.get(user_id, False)
        
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        # –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return user_masslooking_active.get(user_id, False)

async def check_subscription_status(entity, username: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        if not shared_client:
            return False
            
        try:
            full_channel = await get_full_channel_safe(entity)
            if not full_channel:
                return False
            
            return True
            
        except (ChannelPrivateError, UserNotParticipantError):
            return False
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª {username}: {e}")
            return False
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª {username}: {e}")
        return False

async def apply_subscription_delay(username: str, action_type: str = "–ø–æ–¥–ø–∏—Å–∫–∏"):
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ —Å —É—á–µ—Ç–æ–º —Ñ–ª–∞–≥–∞ –ø–µ—Ä–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    global first_subscription_made
    
    if not first_subscription_made:
        logger.info(f"–ü–µ—Ä–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª {username}")
        first_subscription_made = True
        return True
    
    delay_range = settings.get('delay_range', (20, 1000))
    if delay_range == (0, 0):
        return True
    
    try:
        if not isinstance(delay_range, (list, tuple)) or len(delay_range) != 2:
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∑–∞–¥–µ—Ä–∂–∫–∏ {delay_range}")
            delay_range = (20, 1000)
        
        min_delay, max_delay = delay_range
        if not isinstance(min_delay, (int, float)) or not isinstance(max_delay, (int, float)):
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–µ—Ä–∂–∫–∏ {delay_range}")
            delay_range = (20, 1000)
            min_delay, max_delay = delay_range
        
        if min_delay < 0 or max_delay < 0 or min_delay > max_delay:
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ {delay_range}")
            delay_range = (20, 1000)
            min_delay, max_delay = delay_range
        
        subscription_delay = random.uniform(min_delay, max_delay)
        logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {subscription_delay:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ {action_type} –Ω–∞ –∫–∞–Ω–∞–ª {username}")
        
        delay_chunks = int(subscription_delay)
        remaining_delay = subscription_delay - delay_chunks
        
        for _ in range(delay_chunks):
            if not check_bot_running():
                logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ {action_type}")
                return False
            
            try:
                import bot_interface
                new_settings = bot_interface.get_bot_settings()
                if new_settings != settings:
                    settings.update(new_settings)
            except Exception as e:
                pass
            
            await asyncio.sleep(1)
        
        if remaining_delay > 0:
            if not check_bot_running():
                logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ {action_type}")
                return False
            await asyncio.sleep(remaining_delay)
        
        logger.info(f"–ó–∞–¥–µ—Ä–∂–∫–∞ {action_type} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {username}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–µ—Ä–∂–∫–∏ {action_type}: {e}")
        await asyncio.sleep(20)
        return True

async def ensure_subscription(username: str) -> bool:
    """–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏ –ø–µ—Ä–µ–ø–æ–¥–ø–∏—Å–∫–æ–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    try:
        entity = await get_entity_safe(username)
        if not entity:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞ {username}")
            return False
        
        is_subscribed = await check_subscription_status(entity, username)
        
        if not is_subscribed:
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—Ç–ø–∏—Å–∫–∞ –æ—Ç –∫–∞–Ω–∞–ª–∞ {username}, –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –∑–∞–Ω–æ–≤–æ")
            
            delay_success = await apply_subscription_delay(username, "–ø–µ—Ä–µ–ø–æ–¥–ø–∏—Å–∫–∏")
            if not delay_success:
                return False
            
            join_result = await join_channel_safe(entity)
            if join_result is None:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª {username}")
                return False
            
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {username}")
            return True
        else:
            return True
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª {username}: {e}")
        return False

async def smart_wait(wait_time: int, operation_name: str = "operation") -> bool:
    """–£–º–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –∏ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º backoff"""
    original_wait_time = wait_time
    
    if wait_time > FLOOD_WAIT_SETTINGS['max_wait_time']:
        wait_time = FLOOD_WAIT_SETTINGS['max_wait_time']
        logger.warning(f"FloodWait –¥–ª—è {operation_name}: {original_wait_time}—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ {wait_time}—Å")
    
    logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ FloodWait –¥–ª—è {operation_name}: {wait_time} —Å–µ–∫—É–Ω–¥")
    
    statistics['flood_waits'] += 1
    statistics['total_flood_wait_time'] += wait_time
    
    check_interval = FLOOD_WAIT_SETTINGS['check_interval']
    chunks = wait_time // check_interval
    remainder = wait_time % check_interval
    
    for i in range(chunks):
        if not check_bot_running():
            logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è FloodWait –¥–ª—è {operation_name}")
            return False
        
        progress = (i + 1) * check_interval
        remaining = wait_time - progress
        
        await asyncio.sleep(check_interval)
    
    if remainder > 0:
        if not check_bot_running():
            return False
        await asyncio.sleep(remainder)
    
    logger.info(f"FloodWait –¥–ª—è {operation_name} –∑–∞–≤–µ—Ä—à–µ–Ω")
    return True

async def handle_flood_wait(func: Callable, *args, operation_name: str = None, max_retries: int = None, **kwargs) -> Any:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ FloodWait –¥–ª—è –ª—é–±—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    if operation_name is None:
        operation_name = func.__name__ if hasattr(func, '__name__') else "operation"
    
    if max_retries is None:
        max_retries = FLOOD_WAIT_SETTINGS['max_retries']
    
    base_delay = 1
    
    for attempt in range(max_retries):
        try:
            if not check_bot_running():
                logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º {operation_name}")
                return None
            
            return await func(*args, **kwargs)
            
        except FloodWaitError as e:
            wait_time = e.seconds
            logger.warning(f"FloodWait –ø—Ä–∏ {operation_name} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {wait_time} —Å–µ–∫—É–Ω–¥")
            
            if attempt < max_retries - 1:
                if not await smart_wait(wait_time, operation_name):
                    logger.info(f"–ü—Ä–µ—Ä—ã–≤–∞–µ–º {operation_name} –∏–∑-–∑–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞")
                    return None
                
                if FLOOD_WAIT_SETTINGS['enable_exponential_backoff']:
                    extra_delay = base_delay * (FLOOD_WAIT_SETTINGS['backoff_multiplier'] ** attempt)
                    await asyncio.sleep(extra_delay)
                
                continue
            else:
                logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è {operation_name} –ø–æ—Å–ª–µ FloodWait")
                statistics['errors'] += 1
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {operation_name} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt < max_retries - 1:
                await asyncio.sleep(random.uniform(1, 3))
                continue
            else:
                logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è {operation_name}")
                statistics['errors'] += 1
                return None
    
    return None

def extract_message_text(message) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–¥–∏–∞"""
    text = ""
    
    try:
        if hasattr(message, 'message') and message.message:
            text = str(message.message).strip()
        elif hasattr(message, 'text') and message.text:
            text = str(message.text).strip()
        
        if not text and hasattr(message, 'media') and message.media:
            if hasattr(message, 'message') and message.message:
                text = str(message.message).strip()
        
        return text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return ""

def has_commentable_content(message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        if not hasattr(message, 'id') or not message.id or message.id <= 0:
            return False
        
        text = extract_message_text(message)
        
        if text and len(text.strip()) > 0:
            return True
        
        if hasattr(message, 'media') and message.media:
            return True
        
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

async def get_post_comments(message, channel_entity) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç—É"""
    try:
        if not shared_client:
            logger.warning("Telethon –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return ""
        
        discussion_info = await shared_client(GetDiscussionMessageRequest(
            peer=channel_entity,
            msg_id=message.id
        ))
        
        if not discussion_info or not discussion_info.messages:
            return ""
        
        discussion_message = discussion_info.messages[0]
        discussion_group = discussion_message.peer_id
        reply_to_msg_id = discussion_message.id
        
        replies = await shared_client(GetRepliesRequest(
            peer=discussion_group,
            msg_id=reply_to_msg_id,
            offset_date=None,
            offset_id=0,
            offset_peer=None,
            limit=50
        ))
        
        if not replies or not replies.messages:
            return ""
        
        comments = []
        total_length = 0
        max_length = 10000
        
        for msg in replies.messages:
            if msg.message and msg.message.strip():
                sender_name = "–ê–Ω–æ–Ω–∏–º"
                try:
                    if hasattr(msg, 'from_id') and msg.from_id:
                        sender = await shared_client.get_entity(msg.from_id)
                        if hasattr(sender, 'first_name'):
                            sender_name = sender.first_name
                            if hasattr(sender, 'last_name') and sender.last_name:
                                sender_name += f" {sender.last_name}"
                        elif hasattr(sender, 'title'):
                            sender_name = sender.title
                except:
                    pass
                
                comment_text = f"{sender_name}: {msg.message.strip()}"
                
                if total_length + len(comment_text) + 2 > max_length:
                    break
                
                comments.append(comment_text)
                total_length += len(comment_text) + 2
        
        return "\n\n".join(comments)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
        return ""

async def generate_comment(post_text: str, topics: List[str], message=None, channel_entity=None) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –ø–æ–º–æ—â—å—é GPT-4 —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–º—Ç–∞ –∏–∑ bot_interface"""
    try:
        try:
            import bot_interface
            prompts = bot_interface.get_bot_prompts()
            comment_prompt = prompts.get('comment_prompt', '')
            if not comment_prompt:
                raise Exception("–ü—Ä–æ–º—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ bot_interface")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º—Ç–∞ –∏–∑ bot_interface: {e}")
            comment_prompt = """–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. 

–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: {text_of_the_post}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é:
- –ú–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
- –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
- –ë–µ–∑ —Å–ø–∞–º–∞ –∏ –Ω–∞–≤—è–∑—á–∏–≤–æ—Å—Ç–∏
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–º–∞—Ç–∏–∫–µ –ø–æ—Å—Ç–∞
- –í—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ë–µ–∑ —ç–º–æ–¥–∑–∏
- –ë–µ–∑ —Å—Å—ã–ª–æ–∫
- –ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã

–°–æ–∑–¥–∞–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:"""
        
        topics_text = ', '.join(topics) if topics else '–æ–±—â–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞'
        
        comments_text = ""
        if '{comments}' in comment_prompt and message and channel_entity:
            comments_text = await get_post_comments(message, channel_entity)
        
        prompt = comment_prompt
        
        if '{text_of_the_post}' in prompt:
            prompt = prompt.replace('{text_of_the_post}', post_text[:1000])
        else:
            prompt = prompt + f"\n\n–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: {post_text[:1000]}"
        
        if '{topics}' in prompt:
            prompt = prompt.replace('{topics}', topics_text)
        
        if '{comments}' in prompt:
            prompt = prompt.replace('{comments}', comments_text if comments_text else "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
        
        response = g4f.ChatCompletion.create(
            model=g4f.models.gpt_4,
            messages=[{"role": "user", "content": prompt}],
            stream=False
        )
        
        comment = response.strip()
        
        if comment.startswith('"') and comment.endswith('"'):
            comment = comment[1:-1]
        
        if comment.startswith("'") and comment.endswith("'"):
            comment = comment[1:-1]
        
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment[:50]}...")
        return comment
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        fallback_comments = [
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ—Å—Ç!",
            "–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            "–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ç–µ–º–∞",
            "–•–æ—Ä–æ—à–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª",
            "–°–æ–≥–ª–∞—Å–µ–Ω —Å –∞–≤—Ç–æ—Ä–æ–º"
        ]
        return random.choice(fallback_comments)

async def get_entity_safe(identifier):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π FloodWait"""
    async def _get_entity():
        return await shared_client.get_entity(identifier)
    
    return await handle_flood_wait(_get_entity, operation_name=f"get_entity({identifier})")

async def get_full_channel_safe(entity):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π FloodWait"""
    async def _get_full_channel():
        return await shared_client(GetFullChannelRequest(entity))
    
    return await handle_flood_wait(_get_full_channel, operation_name=f"get_full_channel({entity.id})")

async def join_channel_safe(entity):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π FloodWait"""
    async def _join_channel():
        return await shared_client(JoinChannelRequest(entity))
    
    return await handle_flood_wait(_join_channel, operation_name=f"join_channel({entity.username or entity.id})")

async def leave_channel_safe(entity):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø–∏—Å–∫–∞ –æ—Ç –∫–∞–Ω–∞–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —É—á–∞—Å—Ç–∏—è"""
    try:
        try:
            full_channel = await get_full_channel_safe(entity)
            if not full_channel:
                return True
        except (ChannelPrivateError, UserNotParticipantError):
            return True
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–∏—è –≤ –∫–∞–Ω–∞–ª–µ {getattr(entity, 'username', entity.id)}: {e}")
    
        async def _leave_channel():
            return await shared_client(LeaveChannelRequest(entity))
        
        result = await handle_flood_wait(_leave_channel, operation_name=f"leave_channel({getattr(entity, 'username', entity.id)})")
        
        if result is not None:
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –∫–∞–Ω–∞–ª {getattr(entity, 'username', entity.id)}")
            return True
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∏–Ω—É—Ç—å –∫–∞–Ω–∞–ª {getattr(entity, 'username', entity.id)}")
            return False
            
    except (UserNotParticipantError, UserNotMutualContactError) as e:
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –æ—Ç –∫–∞–Ω–∞–ª–∞ {getattr(entity, 'username', entity.id)}: {e}")
        return False

async def send_message_safe(peer, message, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π FloodWait"""
    async def _send_message():
        return await shared_client.send_message(peer, message, **kwargs)
    
    peer_name = getattr(peer, 'username', None) or getattr(peer, 'id', 'unknown')
    return await handle_flood_wait(_send_message, operation_name=f"send_message_to({peer_name})")

async def send_reaction_safe(peer, msg_id, reaction):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π FloodWait –∏ –æ—à–∏–±–∫–∏ –ª–∏–º–∏—Ç–∞ —Ä–µ–∞–∫—Ü–∏–π"""
    async def _send_reaction():
        return await shared_client(SendReactionRequest(
            peer=peer,
            msg_id=msg_id,
            reaction=[ReactionEmoji(emoticon=reaction)]
        ))
    
    peer_name = getattr(peer, 'username', None) or getattr(peer, 'id', 'unknown')
    
    for attempt in range(FLOOD_WAIT_SETTINGS['max_retries']):
        try:
            if not check_bot_running():
                logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ä–µ–∞–∫—Ü–∏–∏")
                return None
            
            return await _send_reaction()
            
        except Exception as e:
            error_str = str(e).lower()
            
            if "reactions_uniq_max" in error_str or "reaction emojis" in error_str:
                logger.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –¥–ª—è –ø–æ—Å—Ç–∞ {msg_id}")
                return None
            
            if "flood" in error_str:
                try:
                    wait_time = int(''.join(filter(str.isdigit, str(e))))
                    if wait_time > 0:
                        logger.warning(f"FloodWait –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∞–∫—Ü–∏–∏: {wait_time} —Å–µ–∫—É–Ω–¥")
                        if not await smart_wait(wait_time, f"send_reaction_to({peer_name}, {msg_id})"):
                            return None
                        continue
                except:
                    pass
            
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt < FLOOD_WAIT_SETTINGS['max_retries'] - 1:
                await asyncio.sleep(random.uniform(1, 3))
                continue
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –ø–æ—Å–ª–µ {FLOOD_WAIT_SETTINGS['max_retries']} –ø–æ–ø—ã—Ç–æ–∫")
                statistics['errors'] += 1
                return None
    
    return None

async def get_discussion_message_safe(peer, msg_id):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ discussion message —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π FloodWait"""
    async def _get_discussion_message():
        return await shared_client(GetDiscussionMessageRequest(peer=peer, msg_id=msg_id))
    
    peer_name = getattr(peer, 'username', None) or getattr(peer, 'id', 'unknown')
    return await handle_flood_wait(_get_discussion_message, operation_name=f"get_discussion_message({peer_name}, {msg_id})")

async def iter_messages_safe(entity, limit=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    messages = []
    try:
        if not shared_client:
            logger.error("Shared client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return messages
            
        message_count = 0
        async for message in shared_client.iter_messages(entity, limit=limit):
            if message and hasattr(message, 'id') and message.id:
                messages.append(message)
                message_count += 1
                
                if message_count % 10 == 0:
                    await asyncio.sleep(0.5)
                else:
                    await asyncio.sleep(0.1)
                    
    except FloodWaitError as e:
        logger.warning(f"FloodWait –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e.seconds} —Å–µ–∫—É–Ω–¥")
        if await smart_wait(e.seconds, "iter_messages"):
            try:
                message_count = 0
                async for message in shared_client.iter_messages(entity, limit=limit):
                    if message and hasattr(message, 'id') and message.id:
                        messages.append(message)
                        message_count += 1
                        
                        if message_count % 10 == 0:
                            await asyncio.sleep(0.5)
                        else:
                            await asyncio.sleep(0.1)
                            
            except Exception as retry_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {retry_error}")
        else:
            logger.info("–ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑-–∑–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞")
    except (ChannelPrivateError, UserNotParticipantError) as e:
        logger.warning(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(messages)} –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    return messages

async def get_channel_available_reactions(entity) -> List[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ"""
    try:
        full_channel = await get_full_channel_safe(entity)
        if not full_channel:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ")
            return DEFAULT_POSITIVE_REACTIONS
        
        if hasattr(full_channel.full_chat, 'available_reactions'):
            available_reactions = full_channel.full_chat.available_reactions
            
            if available_reactions and hasattr(available_reactions, 'reactions'):
                channel_reactions = []
                for reaction in available_reactions.reactions:
                    if hasattr(reaction, 'emoticon'):
                        emoji = reaction.emoticon
                        if emoji in DEFAULT_POSITIVE_REACTIONS:
                            channel_reactions.append(emoji)
                
                if channel_reactions:
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(channel_reactions)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –≤ –∫–∞–Ω–∞–ª–µ")
                    return channel_reactions
        
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π")
        return DEFAULT_POSITIVE_REACTIONS
        
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –∫–∞–Ω–∞–ª–∞: {e}")
        return DEFAULT_POSITIVE_REACTIONS

async def add_reaction_to_post(message, channel_username):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –∫ –ø–æ—Å—Ç—É —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π FloodWait"""
    try:
        if not check_bot_running():
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏")
            return False
        
        entity = await get_entity_safe(message.peer_id)
        if not entity:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏")
            return False
        
        available_reactions = await get_channel_available_reactions(entity)
        
        if not available_reactions:
            logger.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –≤ –∫–∞–Ω–∞–ª–µ")
            return False
        
        reaction = random.choice(available_reactions)
       
        result = await send_reaction_safe(message.peer_id, message.id, reaction)
        
        if result is not None:
            logger.info(f"–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è {reaction} –∫ –ø–æ—Å—Ç—É {message.id}")
            statistics['reactions_set'] += 1
            
            try:
                import bot_interface
                bot_interface.update_statistics(reactions=1)
                bot_interface.add_processed_channel_statistics(channel_username, reaction_added=True)
            except:
                pass
            
            return True
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –ø–æ—Å—Ç {message.id}")
            return False
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏: {e}")
        statistics['errors'] += 1
        return False

async def check_post_comments_available(message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ—Å—Ç–æ–º —á–µ—Ä–µ–∑ replies.comments"""
    try:
        if not hasattr(message, 'replies') or not message.replies:
            return False
        
        if hasattr(message.replies, 'comments') and message.replies.comments:
            logger.info(f"–ü–æ—Å—Ç {message.id} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
            return True
        else:
            logger.info(f"–ü–æ—Å—Ç {message.id} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
            return False
        
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ—Å—Ç–∞: {e}")
        return False

async def send_comment_to_post(message, comment_text: str, channel_username: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø–æ—Å—Ç—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É"""
    try:
        if not shared_client:
            logger.warning("Telethon –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        if not hasattr(message, 'replies') or not message.replies:
            logger.info(f"–ü–æ—Å—Ç {message.id} –≤ –∫–∞–Ω–∞–ª–µ {channel_username} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
            return False
        
        try:
            async def _get_discussion_message():
                return await shared_client(GetDiscussionMessageRequest(
                    peer=message.peer_id,
                    msg_id=message.id
                ))
            
            discussion_info = await handle_flood_wait(
                _get_discussion_message,
                operation_name="get_discussion_info"
            )
            
            if not discussion_info or not discussion_info.messages:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è –ø–æ—Å—Ç–∞ {message.id} –≤ –∫–∞–Ω–∞–ª–µ {channel_username}")
                return False
            
            discussion_group = discussion_info.messages[0].peer_id
            reply_to_msg_id = discussion_info.messages[0].id
            
        except Exception as e:
            error_str = str(e).lower()
            
            if "message id used in the peer was invalid" in error_str:
                logger.info(f"–ü–æ—Å—Ç {message.id} –≤ –∫–∞–Ω–∞–ª–µ {channel_username} –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π ID)")
                return False
            elif "msg_id invalid" in error_str:
                logger.info(f"–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è {message.id} –≤ –∫–∞–Ω–∞–ª–µ {channel_username}")
                return False
            elif "peer_id_invalid" in error_str:
                logger.warning(f"–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π peer_id –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username}")
                return False
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è –ø–æ—Å—Ç–∞ {message.id}: {e}")
                return False
        
        async def _send_comment():
            return await shared_client.send_message(
                discussion_group,
                message=comment_text,
                reply_to=reply_to_msg_id
            )
        
        try:
            comment = await handle_flood_wait(
                _send_comment,
                operation_name="send_comment"
            )
            
            if comment:
                logger.info(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫ –ø–æ—Å—Ç—É {message.id} –≤ {channel_username}")
                statistics['comments_sent'] += 1
                
                try:
                    import bot_interface
                    bot_interface.update_statistics(comments=1)
                    comment_link = f"https://t.me/{channel_username.replace('@', '')}/{message.id}"
                    post_link = f"https://t.me/{channel_username.replace('@', '')}/{message.id}"
                    bot_interface.add_processed_channel_statistics(channel_username, comment_link=comment_link, post_link=post_link)
                except:
                    pass
                
                return True
                
        except Exception as e:
            error_str = str(e).lower()
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ {channel_username}: {e}")
            
            join_required_patterns = [
                "you join the discussion group before commenting",
                "join the discussion group before commenting", 
                "must join the discussion group",
                "need to join the discussion group",
                "must join",
                "need to join"
            ]
            
            requires_join = any(pattern in error_str for pattern in join_required_patterns)
            
            if requires_join:
                logger.info(f"–¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è {channel_username}")
                
                try:
                    channel_entity = await handle_flood_wait(
                        lambda: shared_client.get_entity(message.peer_id),
                        operation_name="get_channel_entity_for_join"
                    )
                    
                    if not channel_entity:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞ –¥–ª—è {channel_username}")
                        return False
                    
                    full_channel = await handle_flood_wait(
                        lambda: shared_client(GetFullChannelRequest(channel=channel_entity)),
                        operation_name="get_full_channel_for_join"
                    )
                    
                    if not full_channel or not hasattr(full_channel.full_chat, 'linked_chat_id') or not full_channel.full_chat.linked_chat_id:
                        logger.error(f"–ö–∞–Ω–∞–ª {channel_username} –Ω–µ –∏–º–µ–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π")
                        return False
                    
                    discussion_group_entity = await handle_flood_wait(
                        lambda: shared_client.get_entity(full_channel.full_chat.linked_chat_id),
                        operation_name="get_discussion_group_entity"
                    )
                    
                    if not discussion_group_entity:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è {channel_username}")
                        return False
                    
                    join_result = await handle_flood_wait(
                        lambda: shared_client(JoinChannelRequest(discussion_group_entity)),
                        operation_name="join_discussion_group"
                    )
                    
                    if join_result is None:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è {channel_username}")
                        return False
                    
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è {channel_username}")
                    
                    await asyncio.sleep(2)
                    
                    try:
                        comment = await handle_flood_wait(
                            _send_comment,
                            operation_name="send_comment_after_join"
                        )
                        
                        if comment:
                            logger.info(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É {channel_username}")
                            statistics['comments_sent'] += 1
                            
                            try:
                                import bot_interface
                                bot_interface.update_statistics(comments=1)
                                comment_link = f"https://t.me/{channel_username.replace('@', '')}/{message.id}"
                                post_link = f"https://t.me/{channel_username.replace('@', '')}/{message.id}"
                                bot_interface.add_processed_channel_statistics(channel_username, comment_link=comment_link, post_link=post_link)
                            except:
                                pass
                            
                            return True
                        else:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–∞–∂–µ –ø–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É {channel_username}")
                            return False
                            
                    except Exception as retry_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É {channel_username}: {retry_error}")
                        return False
                        
                except Exception as join_error:
                    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è {channel_username}: {join_error}")
                    return False
            
            elif "message id used in the peer was invalid" in error_str:
                logger.warning(f"–ü–æ—Å—Ç {message.id} –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ {channel_username}")
                return False
            elif "chat_write_forbidden" in error_str:
                logger.warning(f"–ó–∞–ø—Ä–µ—â–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞ {channel_username}")
                return False
            elif "user_banned_in_channel" in error_str:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ/–≥—Ä—É–ø–ø–µ {channel_username}")
                return False
            else:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ {channel_username}: {e}")
                return False
        
        return False
                
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        return False

async def save_masslooking_progress():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from database import db
        
        serializable_queue = {}
        for username, data in channel_processing_queue.items():
            serializable_queue[username] = {
                'entity_id': data.get('entity_id'),
                'entity_username': data.get('entity_username'),
                'message_ids': data.get('message_ids', []),
                'total_posts': data.get('total_posts', 0),
                'posts_processed': data.get('posts_processed', 0),
                'last_processed': data.get('last_processed').isoformat() if data.get('last_processed') else None,
                'actions_performed': data.get('actions_performed', False),
                'found_topic': data.get('found_topic', '–î—Ä—É–≥–æ–µ')
            }
        
        serializable_tracked = {}
        for username, data in tracked_channels.items():
            serializable_tracked[username] = {
                'entity_id': data.get('entity_id'),
                'last_message_id': data.get('last_message_id', 0)
            }
        
        progress_data = [
            ('masslooking_progress', masslooking_progress),
            ('processed_channels', list(processed_channels)),
            ('channel_processing_queue', serializable_queue),
            ('tracked_channels', serializable_tracked)
        ]
        
        for key, value in progress_data:
            await db.save_bot_state(key, value)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞: {e}")

async def load_masslooking_progress():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    global masslooking_progress, processed_channels, channel_processing_queue, tracked_channels
    try:
        from database import db
        
        saved_progress = await db.load_bot_state('masslooking_progress', {})
        if saved_progress:
            masslooking_progress.update(saved_progress)
        
        saved_channels = await db.load_bot_state('processed_channels', [])
        if saved_channels:
            processed_channels.update(saved_channels)
        
        saved_queue = await db.load_bot_state('channel_processing_queue', {})
        if saved_queue:
            for username, data in saved_queue.items():
                channel_processing_queue[username] = {
                    'entity_id': data.get('entity_id'),
                    'entity_username': data.get('entity_username', username),
                    'message_ids': data.get('message_ids', []),
                    'total_posts': data.get('total_posts', 0),
                    'posts_processed': data.get('posts_processed', 0),
                    'last_processed': datetime.fromisoformat(data['last_processed']) if data.get('last_processed') else None,
                    'actions_performed': data.get('actions_performed', False),
                    'found_topic': data.get('found_topic', '–î—Ä—É–≥–æ–µ')
                }
        
        saved_tracked = await db.load_bot_state('tracked_channels', {})
        if saved_tracked:
            for username, data in saved_tracked.items():
                tracked_channels[username] = {
                    'entity_id': data.get('entity_id'),
                    'last_message_id': data.get('last_message_id', 0)
                }
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞: {e}")

async def prepare_channel_for_processing(username: str, user_id: int):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        queue = user_channel_processing_queue.get(user_id, {})
        processed = user_processed_channels.get(user_id, set())
        
        if username in queue:
            logger.info(f"–ö–∞–Ω–∞–ª {username} —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return False
        
        if username in processed:
            logger.info(f"–ö–∞–Ω–∞–ª {username} —É–∂–µ –±—ã–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return False
        
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫–∞–Ω–∞–ª–∞ {username} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        client = user_clients.get(user_id)
        if not client:
            logger.error(f"–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return False
        
        entity = await get_entity_safe(username)
        if not entity:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞ {username}")
            return False
        
        logger.info(f"–°—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞ {username} –ø–æ–ª—É—á–µ–Ω–∞: ID={entity.id}")
        
        full_channel = await get_full_channel_safe(entity)
        if not full_channel:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ {username}")
            return False
        
        logger.info(f"–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ {username} –ø–æ–ª—É—á–µ–Ω–∞")
        
        if not (hasattr(full_channel.full_chat, 'linked_chat_id') and full_channel.full_chat.linked_chat_id):
            logger.warning(f"–ö–∞–Ω–∞–ª {username} –Ω–µ –∏–º–µ–µ—Ç –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π")
            return False
        
        logger.info(f"–ö–∞–Ω–∞–ª {username} –∏–º–µ–µ—Ç –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π")
        
        delay_success = await apply_subscription_delay(username, "–ø–æ–¥–ø–∏—Å–∫–∏")
        if not delay_success:
            logger.error(f"–ü—Ä–µ—Ä–≤–∞–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {username}")
            return False
        
        join_result = await join_channel_safe(entity)
        if join_result is None:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª {username}")
            return False
        
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {username}")
        
        try:
            settings = user_settings.get(user_id, {})
            posts_range = settings.get('posts_range', (1, 5))
            limit = posts_range[1] if isinstance(posts_range, (list, tuple)) and len(posts_range) >= 2 else 5
            
            fetch_limit = min(limit * 10, 200)
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ {fetch_limit} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ {username}")
            
            all_messages = []
            message_count = 0
            
            try:
                logger.info(f"–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–∞–Ω–∞–ª—É {username} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π")
                
                async for message in client.iter_messages(entity, limit=fetch_limit):
                    message_count += 1
                    
                    if message and hasattr(message, 'id') and message.id:
                        all_messages.append(message)
                        
                        if message_count % 20 == 0:
                            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
                            await asyncio.sleep(1)
                            
                logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {username}: –ø–æ–ª—É—á–µ–Ω–æ {len(all_messages)} –≤–∞–ª–∏–¥–Ω—ã—Ö")
                
            except Exception as fetch_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ {username}: {fetch_error}")
                await leave_channel_safe(entity)
                return False
            
            if not all_messages:
                logger.error(f"–ù–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ {username}")
                await leave_channel_safe(entity)
                return False
            
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é {len(all_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ {username}")
            
            message_ids = []
            valid_message_count = 0
            
            for i, message in enumerate(all_messages):
                if not hasattr(message, 'id') or not message.id or message.id <= 0:
                    continue
                
                text = extract_message_text(message)
                has_text = text and len(text.strip()) > 0
                has_media = hasattr(message, 'media') and message.media
                
                if has_text or has_media:
                    message_ids.append(message.id)
                    valid_message_count += 1
                    
                    if len(message_ids) >= limit:
                        logger.info(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {limit}")
                        break
            
            logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {username}:")
            logger.info(f"  –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: {len(all_messages)}")
            logger.info(f"  –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–∞–π–¥–µ–Ω–æ: {valid_message_count}")
            logger.info(f"  ID –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: {len(message_ids)}")
            
            if not message_ids:
                logger.error(f"–í –∫–∞–Ω–∞–ª–µ {username} –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                await leave_channel_safe(entity)
                return False
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(message_ids)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∫–∞–Ω–∞–ª–µ {username}")
            
            if user_id not in user_channel_processing_queue:
                user_channel_processing_queue[user_id] = {}
            
            user_channel_processing_queue[user_id][username] = {
                'entity_id': entity.id,
                'entity_username': username,
                'message_ids': message_ids,
                'total_posts': len(message_ids),
                'posts_processed': 0,
                'last_processed': None,
                'actions_performed': False
            }
            
            logger.info(f"–ö–∞–Ω–∞–ª {username} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞ {username}: {e}")
            await leave_channel_safe(entity)
            return False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–∞ {username}: {e}")
        return False

async def process_single_post_from_channel(username: str, user_id: int) -> bool:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ID"""
    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º user_processed_channels –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if user_id not in user_processed_channels:
            user_processed_channels[user_id] = set()
            
        queue = user_channel_processing_queue.get(user_id, {})
        if username not in queue:
            logger.warning(f"–ö–∞–Ω–∞–ª {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return False
        
        channel_data = queue[username]
        client = user_clients.get(user_id)
        
        if not client:
            logger.error(f"–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return False
        
        if channel_data['posts_processed'] >= channel_data['total_posts']:
            logger.info(f"–í—Å–µ –ø–æ—Å—Ç—ã –∫–∞–Ω–∞–ª–∞ {username} –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return False
        
        subscription_ok = await ensure_subscription(username)
        if not subscription_ok:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–µ—Å–ø–µ—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª {username}")
            return False
        
        message_ids = channel_data.get('message_ids', [])
        if not message_ids or len(message_ids) == 0:
            logger.error(f"–ù–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–∞ {username}")
            channel_data['posts_processed'] = channel_data['total_posts']
            return False
        
        posts_processed = channel_data['posts_processed']
        if posts_processed >= len(message_ids):
            logger.warning(f"–ò–Ω–¥–µ–∫—Å {posts_processed} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Å—Å–∏–≤–∞ ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–∞ {username}")
            channel_data['posts_processed'] = channel_data['total_posts']
            return False
        
        current_message_id = message_ids[posts_processed]
        
        logger.info(f"–ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {current_message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {username} ({posts_processed + 1}/{len(message_ids)})")
        
        try:
            entity = await get_entity_safe(username)
            if not entity:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞ {username}")
                channel_data['posts_processed'] += 1
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ {username}: {e}")
            channel_data['posts_processed'] += 1
            return True
        
        current_post = None
        try:
            messages = await client.get_messages(entity, ids=current_message_id)
            if messages and isinstance(messages, list) and len(messages) > 0:
                current_post = messages[0]
            elif messages and not isinstance(messages, list):
                current_post = messages
            else:
                logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ {current_message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                channel_data['posts_processed'] += 1
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {current_message_id}: {e}")
            channel_data['posts_processed'] += 1
            return True
        
        if not current_post:
            logger.warning(f"–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è {current_message_id} –≤ –∫–∞–Ω–∞–ª–µ {username}")
            channel_data['posts_processed'] += 1
            return True
        
        if not hasattr(current_post, 'id') or current_post.id != current_message_id:
            logger.warning(f"ID —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
            channel_data['posts_processed'] += 1
            return True
       
        if not has_commentable_content(current_post):
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {current_message_id} –≤ –∫–∞–Ω–∞–ª–µ {username} –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            channel_data['posts_processed'] += 1
            return True
        
        post_text = extract_message_text(current_post)
        if not post_text:
            logger.info(f"–ü–æ—Å—Ç {current_message_id} –≤ –∫–∞–Ω–∞–ª–µ {username} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            channel_data['posts_processed'] += 1
            return True
        
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç {current_message_id} –≤ –∫–∞–Ω–∞–ª–µ {username}")
        
        channel_topic = channel_data.get('found_topic', '–î—Ä—É–≥–æ–µ')
        
        comment_sent = False
        reaction_added = False
        actions_performed = False
        
        try:
            comment = await generate_comment(post_text, [channel_topic], current_post)
            
            if comment:
                comments_available = await check_post_comments_available(current_post)
                
                if comments_available:
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É {current_message_id} –≤ –∫–∞–Ω–∞–ª–µ {username}")
                    comment_sent = await send_comment_to_post(current_post, comment, username)
                    if comment_sent:
                        logger.info(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫ –ø–æ—Å—Ç—É {current_message_id} –≤ –∫–∞–Ω–∞–ª–µ {username}")
                        actions_performed = True
                        
                        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º user_statistics –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        if user_id not in user_statistics:
                            user_statistics[user_id] = {
                                'comments_sent': 0,
                                'reactions_set': 0,
                                'channels_processed': 0,
                                'errors': 0,
                                'flood_waits': 0,
                                'total_flood_wait_time': 0
                            }
                        
                        user_stats = user_statistics[user_id]
                        user_stats['comments_sent'] = user_stats.get('comments_sent', 0) + 1
                        user_statistics[user_id] = user_stats
                        
                        try:
                            import bot_interface
                            bot_interface.update_statistics(comments=1)
                            comment_link = f"https://t.me/{username.replace('@', '')}/{current_message_id}"
                            post_link = f"https://t.me/{username.replace('@', '')}/{current_message_id}"
                            bot_interface.add_processed_channel_statistics(username, comment_link=comment_link, post_link=post_link)
                        except Exception as e:
                            pass
                    else:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É {current_message_id} –≤ –∫–∞–Ω–∞–ª–µ {username}")
                else:
                    logger.info(f"–ü–æ—Å—Ç {current_message_id} –≤ –∫–∞–Ω–∞–ª–µ {username} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø–æ—Å—Ç–∞ {current_message_id} –≤ –∫–∞–Ω–∞–ª–µ {username}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –ø–æ—Å—Ç–∞ {current_message_id} –≤ –∫–∞–Ω–∞–ª–µ {username}: {e}")
        
        try:
            logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –∫ –ø–æ—Å—Ç—É {current_message_id} –≤ –∫–∞–Ω–∞–ª–µ {username}")
            reaction_added = await add_reaction_to_post(current_post, username)
            if reaction_added:
                logger.info(f"–†–µ–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –ø–æ—Å—Ç—É {current_message_id} –≤ –∫–∞–Ω–∞–ª–µ {username}")
                actions_performed = True
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º user_statistics –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if user_id not in user_statistics:
                    user_statistics[user_id] = {
                        'comments_sent': 0,
                        'reactions_set': 0,
                        'channels_processed': 0,
                        'errors': 0,
                        'flood_waits': 0,
                        'total_flood_wait_time': 0
                    }
                
                user_stats = user_statistics[user_id]
                user_stats['reactions_set'] = user_stats.get('reactions_set', 0) + 1
                user_statistics[user_id] = user_stats
                
                try:
                    import bot_interface
                    bot_interface.update_statistics(reactions=1)
                except Exception as e:
                    pass
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –∫ –ø–æ—Å—Ç—É {current_message_id} –≤ –∫–∞–Ω–∞–ª–µ {username}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏ –∫ –ø–æ—Å—Ç—É {current_message_id} –≤ –∫–∞–Ω–∞–ª–µ {username}: {e}")
        
        channel_data['posts_processed'] += 1
        channel_data['last_processed'] = datetime.now()
        
        if actions_performed:
            channel_data['actions_performed'] = True
            logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–æ—Å—Ç–∞ {current_message_id} –≤ –∫–∞–Ω–∞–ª–µ {username}")
        else:
            logger.warning(f"–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–æ—Å—Ç–∞ {current_message_id} –≤ –∫–∞–Ω–∞–ª–µ {username}")
        
        return True
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ {username} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º user_statistics –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if user_id not in user_statistics:
            user_statistics[user_id] = {
                'comments_sent': 0,
                'reactions_set': 0,
                'channels_processed': 0,
                'errors': 0,
                'flood_waits': 0,
                'total_flood_wait_time': 0
            }
        user_stats = user_statistics[user_id]
        user_stats['errors'] = user_stats.get('errors', 0) + 1
        user_statistics[user_id] = user_stats
        return False

async def finalize_channel_processing(username: str, user_id: int):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—Ç–ø–∏—Å–∫–∏"""
    try:
        queue = user_channel_processing_queue.get(user_id, {})
        channel_data = queue.get(username)
        if not channel_data:
            logger.warning(f"–î–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ {username} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return
        
        actions_performed = channel_data.get('actions_performed', False)
        
        if not actions_performed:
            logger.warning(f"–í –∫–∞–Ω–∞–ª–µ {username} –Ω–µ –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            if user_id not in user_processed_channels:
                user_processed_channels[user_id] = set()
            user_processed_channels[user_id].add(username)
            
            user_stats = user_statistics.get(user_id, {})
            user_stats['channels_processed'] = user_stats.get('channels_processed', 0) + 1
            user_statistics[user_id] = user_stats
            
            logger.info(f"–ö–∞–Ω–∞–ª {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            try:
                import bot_interface
                bot_interface.update_statistics(channels=1)
            except:
                pass
        
        settings = user_settings.get(user_id, {})
        track_new_posts = settings.get('track_new_posts', False)

        try:
            client = user_clients.get(user_id)
            if not client:
                logger.warning(f"–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞ {username} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            else:
                entity = await get_entity_safe(username)
                if not entity:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞ {username} –¥–ª—è —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏")
                else:
                    if track_new_posts and actions_performed:
                        logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª {username} –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                        try:
                            messages = await iter_messages_safe(entity, limit=1)
                            last_message_id = messages[0].id if messages else 0
                            
                            if user_id not in user_tracked_channels:
                                user_tracked_channels[user_id] = {}
                            
                            user_tracked_channels[user_id][username] = {
                                'entity_id': entity.id,
                                'last_message_id': last_message_id
                            }
                            logger.info(f"–ö–∞–Ω–∞–ª {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {username} –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                    else:
                        reason = "track_new_posts = False" if not track_new_posts else "–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è"
                        logger.info(f"–û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞ {username} ({reason})")
                        leave_result = await leave_channel_safe(entity)
                        if leave_result:
                            logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞–Ω–∞–ª–∞ {username}")
                        else:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞ {username}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è entity –¥–ª—è —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞ {username}: {e}")

        if username in queue:
            del queue[username]
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞ {username} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        user_stats = user_statistics.get(user_id, {})
        user_stats['errors'] = user_stats.get('errors', 0) + 1
        user_statistics[user_id] = user_stats

async def check_new_posts_in_tracked_channels(user_id: int):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    tracked_channels = user_tracked_channels.get(user_id, {})
    client = user_clients.get(user_id)
    
    if not tracked_channels or not client:
        return
    
    logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ {len(tracked_channels)} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    for username, channel_data in list(tracked_channels.items()):
        try:
            if not check_bot_running(user_id):
                logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                break
            
            await asyncio.sleep(2)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ {username} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            continue
    
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

async def new_post_tracking_worker(user_id: int):
    """–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"–ó–∞–ø—É—â–µ–Ω worker –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    while user_masslooking_active.get(user_id, False):
        try:
            if not check_bot_running(user_id):
                logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                break
            
            tracked_channels = user_tracked_channels.get(user_id, {})
            if tracked_channels:
                await check_new_posts_in_tracked_channels(user_id)
            
            for _ in range(300):
                if not check_bot_running(user_id) or not user_masslooking_active.get(user_id, False):
                    break
                await asyncio.sleep(1)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ worker –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await asyncio.sleep(60)
    
    logger.info(f"Worker –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

async def start_new_post_tracking(user_id: int):
    """–ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        asyncio.create_task(new_post_tracking_worker(user_id))
        logger.info(f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def stop_new_post_tracking(user_id: int):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

async def masslooking_worker(user_id: int):
    """–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    while user_masslooking_active.get(user_id, False):
        try:
            if not check_bot_running(user_id):
                logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                user_masslooking_active[user_id] = False
                break
            
            client = user_clients.get(user_id)
            if not client:
                logger.error(f"–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                user_masslooking_active[user_id] = False
                break
            
            try:
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è global –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                global shared_client, settings
                shared_client = client
                settings = user_settings.get(user_id, {})
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–∞–Ω–∞–ª—ã –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                queue = user_channel_processing_queue.get(user_id, {})
                if queue:
                    logger.info(f"–í –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞–π–¥–µ–Ω–æ {len(queue)} –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω –∫–∞–Ω–∞–ª –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                    for username in list(queue.keys()):
                        if not check_bot_running(user_id):
                            break
                        
                        try:
                            success = await process_single_post_from_channel(username, user_id)
                            if success:
                                logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ {username} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                                
                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                channel_data = queue[username]
                                if channel_data['posts_processed'] >= channel_data['total_posts']:
                                    # –ö–∞–Ω–∞–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω
                                    await finalize_channel_processing(username, user_id)
                                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º user_processed_channels –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                                    if user_id not in user_processed_channels:
                                        user_processed_channels[user_id] = set()
                                    user_processed_channels[user_id].add(username)
                                    
                                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º user_statistics –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                                    if user_id not in user_statistics:
                                        user_statistics[user_id] = {
                                            'comments_sent': 0,
                                            'reactions_set': 0,
                                            'channels_processed': 0,
                                            'errors': 0,
                                            'flood_waits': 0,
                                            'total_flood_wait_time': 0
                                        }
                                    user_statistics[user_id]['channels_processed'] += 1
                                    del queue[username]
                                    logger.info(f"–ö–∞–Ω–∞–ª {username} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                            else:
                                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ {username}")
                                
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–∞ {username} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–∞–Ω–∞–ª –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                            if username in queue:
                                del queue[username]
                        
                        break  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É –∫–∞–Ω–∞–ª—É –∑–∞ –∏—Ç–µ—Ä–∞—Ü–∏—é
                else:
                    logger.info(f"–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∂–¥–µ–º –Ω–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã...")
                    await asyncio.sleep(30)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                await asyncio.sleep(60)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            try:
                import bot_interface
                user_session = await bot_interface.db.load_user_session(user_id)
                new_settings = user_session.get('settings', {})
                if new_settings and new_settings != user_settings.get(user_id, {}):
                    user_settings[user_id].update(new_settings)
                    logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
            await asyncio.sleep(10)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await asyncio.sleep(30)
    
    logger.info(f"–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

async def add_channel_to_queue(username: str, user_id: int = None):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not user_id:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –µ—Å–ª–∏ user_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è global –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        global shared_client, settings
        settings = settings if 'settings' in globals() else {}
        
        max_channels = settings.get('max_channels', 150)
        
        if max_channels != float('inf') and len(processed_channels) >= max_channels:
            logger.info(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ ({max_channels}), –∫–∞–Ω–∞–ª {username} –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å")
            return
        
        if username not in processed_channels and username not in channel_processing_queue:
            success = await prepare_channel_for_processing(username)
            if success:
                logger.info(f"–ö–∞–Ω–∞–ª {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∫—Ä—É–≥–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                
                try:
                    import bot_interface
                    queue_list = list(channel_processing_queue.keys())
                    bot_interface.update_queue_statistics(queue_list)
                except:
                    pass
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª {username} –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        else:
            logger.info(f"–ö–∞–Ω–∞–ª {username} —É–∂–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_channel_processing_queue:
        user_channel_processing_queue[user_id] = {}
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º user_processed_channels –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if user_id not in user_processed_channels:
        user_processed_channels[user_id] = set()
    
    queue = user_channel_processing_queue[user_id]
    processed = user_processed_channels[user_id]
    
    if username in processed:
        logger.info(f"–ö–∞–Ω–∞–ª {username} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return
    
    if username in queue:
        logger.info(f"–ö–∞–Ω–∞–ª {username} —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    global shared_client, settings
    shared_client = user_clients.get(user_id)
    settings = user_settings.get(user_id, {})
    
    if not shared_client:
        logger.error(f"–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–∞ {username} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–∞
    success = await prepare_channel_for_processing(username, user_id)
    if success:
        # –ö–æ–ø–∏—Ä—É–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if username in channel_processing_queue:
            queue[username] = channel_processing_queue[username].copy()
            # –£–¥–∞–ª—è–µ–º –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏
            del channel_processing_queue[username]
            logger.info(f"–ö–∞–Ω–∞–ª {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            logger.warning(f"–ö–∞–Ω–∞–ª {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ –ø–æ—Å–ª–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏")
    else:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª {username} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

async def start_masslooking(telegram_client: TelegramClient, masslooking_settings: dict, user_id: int):
    """–ó–∞–ø—É—Å–∫ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    global user_clients, user_settings, user_processed_channels, user_statistics, user_masslooking_active
    
    if user_id in user_clients and user_masslooking_active.get(user_id, False):
        logger.warning(f"–ú–∞—Å—Å–ª—É–∫–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        return
    
    logger.info(f"–ó–∞–ø—É—Å–∫ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    user_clients[user_id] = telegram_client
    user_settings[user_id] = masslooking_settings.copy()
    user_processed_channels[user_id] = set()
    user_channel_processing_queue[user_id] = {}
    user_tracked_channels[user_id] = {}
    user_masslooking_active[user_id] = True
    user_statistics[user_id] = {
        'comments_sent': 0,
        'reactions_set': 0,
        'channels_processed': 0,
        'errors': 0,
        'flood_waits': 0,
        'total_flood_wait_time': 0
    }
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π worker –ø—Ä–æ—Ü–µ—Å—Å
    logger.info(f"–ó–∞–ø—É—Å–∫ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    asyncio.create_task(masslooking_worker(user_id))
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if masslooking_settings.get('track_new_posts', False):
        await start_new_post_tracking(user_id)
    
    logger.info(f"–ú–∞—Å—Å–ª—É–∫–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

async def stop_masslooking(user_id: int):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    global user_clients, user_settings, user_processed_channels, user_statistics, user_masslooking_active
    
    logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    if user_id in user_masslooking_active:
        user_masslooking_active[user_id] = False
    
    await stop_new_post_tracking(user_id)
    
    if user_id in user_clients:
        try:
            client = user_clients[user_id]
            if client and client.is_connected():
                await client.disconnect()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        del user_clients[user_id]
    
    user_settings.pop(user_id, None)
    user_processed_channels.pop(user_id, None)
    user_channel_processing_queue.pop(user_id, None)
    user_tracked_channels.pop(user_id, None)
    user_statistics.pop(user_id, None)
    
    logger.info(f"–ú–∞—Å—Å–ª—É–∫–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

def get_statistics(user_id: int = None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id and user_id in user_statistics:
        stats = user_statistics[user_id].copy()
        queue_size = len(user_channel_processing_queue.get(user_id, {}))
        tracked_count = len(user_tracked_channels.get(user_id, {}))
        
        stats.update({
            'queue_size': queue_size,
            'tracked_channels_count': tracked_count,
            'masslooking_active': user_masslooking_active.get(user_id, False)
        })
        return stats
    elif user_id is None:
        return {uid: {
            **stats,
            'queue_size': len(user_channel_processing_queue.get(uid, {})),
            'tracked_channels_count': len(user_tracked_channels.get(uid, {})),
            'masslooking_active': user_masslooking_active.get(uid, False)
        } for uid, stats in user_statistics.items()}
    else:
        return {
            'comments_sent': 0,
            'reactions_set': 0,
            'channels_processed': 0,
            'errors': 0,
            'flood_waits': 0,
            'total_flood_wait_time': 0,
            'queue_size': 0,
            'tracked_channels_count': 0,
            'masslooking_active': False
        }

def reset_statistics():
    """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    global statistics, masslooking_progress, first_subscription_made
    statistics = {
        'comments_sent': 0,
        'reactions_set': 0,
        'channels_processed': 0,
        'errors': 0,
        'flood_waits': 0,
        'total_flood_wait_time': 0
    }
    masslooking_progress = {'current_channel': '', 'processed_count': 0}
    first_subscription_made = False

def update_flood_wait_settings(new_settings: dict):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ FloodWait"""
    global FLOOD_WAIT_SETTINGS
    FLOOD_WAIT_SETTINGS.update(new_settings)
    logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ FloodWait –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {FLOOD_WAIT_SETTINGS}")

async def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è"""
    test_settings = {
        'delay_range': (5, 10),
        'posts_range': (1, 3),
        'max_channels': 5,
        'track_new_posts': False
    }
    
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è masslooker...")
    print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞:", get_statistics())

if __name__ == "__main__":
    asyncio.run(main())