import logging
import json
import os
import re
import asyncio
from datetime import datetime
from typing import Dict, List, Optional
import base64
import signal
import sys
import atexit
import threading
from concurrent.futures import ThreadPoolExecutor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_filename = 'run_log.log'

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª
file_mode = 'w' if not os.path.exists(log_filename) else 'a'

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_filename, mode=file_mode, encoding='utf-8'),
        logging.StreamHandler()
    ]
)
 
logger = logging.getLogger(__name__)

try:
    import nest_asyncio
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–µ–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è  
    try:
        current_loop = asyncio.get_running_loop()
        import sys
        if any(name in sys.modules for name in ['IPython', 'google.colab']):
            nest_asyncio.apply()
            logger.info("nest_asyncio –ø—Ä–∏–º–µ–Ω–µ–Ω –¥–ª—è Jupyter/Colab —Å—Ä–µ–¥—ã")
        else:
            logger.info("Event loop –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –Ω–æ —Å—Ä–µ–¥–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç nest_asyncio")
    except RuntimeError:
        logger.info("–ó–∞–ø—É—Å–∫ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Ä–µ–¥–µ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ event loop")
        pass
except ImportError:
    logger.info("nest_asyncio –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ")
    pass

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
logging.getLogger('telegram').setLevel(logging.WARNING)
logging.getLogger('telethon').setLevel(logging.WARNING)
logging.getLogger('urllib3').setLevel(logging.WARNING)
logging.getLogger('httpx').setLevel(logging.WARNING)

try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
    from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
    from telegram.constants import ParseMode
    from telethon import TelegramClient, events
    from telethon.errors import SessionPasswordNeededError, PhoneCodeInvalidError, PasswordHashInvalidError
    from telethon.tl.functions.messages import GetDiscussionMessageRequest
    from telethon.tl.functions.messages import GetRepliesRequest
    import g4f
    import aiosqlite
except ImportError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫: {e}")
    raise

user_sessions_cache = {}

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
from database import db, init_database, close_database

# Thread pool –¥–ª—è –¥–æ–ª–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
executor = ThreadPoolExecutor(max_workers=4, thread_name_prefix="bot_worker")

# –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—Ä–æ–º—Ç—ã
DEFAULT_COMMENT_PROMPT = """–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. 

–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: {text_of_the_post}

–¢–µ–º–∞—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞: {topics}

–î—Ä—É–≥–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–¥ –ø–æ—Å—Ç–æ–º: {comments}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é:
- –ú–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
- –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
- –ë–µ–∑ —Å–ø–∞–º–∞ –∏ –Ω–∞–≤—è–∑—á–∏–≤–æ—Å—Ç–∏
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–º–∞—Ç–∏–∫–µ –ø–æ—Å—Ç–∞
- –í—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ë–µ–∑ —ç–º–æ–¥–∑–∏
- –ë–µ–∑ —Å—Å—ã–ª–æ–∫
- –ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã

–ü—Ä–∏–º–µ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:
- "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å, —Å–æ–≥–ª–∞—Å–µ–Ω —Å –∞–≤—Ç–æ—Ä–æ–º"
- "–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ—Å—Ç"
- "–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ç–µ–º–∞, —Ö–æ—Ä–æ—à–æ —Ä–∞—Å–∫—Ä—ã—Ç–∞"
- "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å"
- "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª"

–°–æ–∑–¥–∞–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:"""

DEFAULT_ANALYSIS_PROMPT = """–î–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞:

{full_text}

‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ Telegram-–∫–∞–Ω–∞–ª–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ—Å—Ç—ã –∫–∞–Ω–∞–ª–∞ –∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ [...]

üìå 1. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π **–¢–û–ß–ù–´–ï** –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è –≤ **–Ω–∞–∑–≤–∞–Ω–∏—è—Ö –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ —Ç–æ—á–Ω–æ –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ**.

- –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã **–Ω–∞ 100% –æ—Ç—Ä–∞–∂–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É –∫–∞–Ω–∞–ª–∞**.
- –¢–µ–º–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ **–æ–ø–∏—Å–∞–Ω–∏–∏** –∏–ª–∏ —è–≤–Ω–æ **–¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç –≤ 90%+ –ø–æ—Å—Ç–æ–≤ –ø–æ —Å–º—ã—Å–ª—É** (–Ω–µ [...]
- **–ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ —Å–ª–æ–≤–∞**, –∫–æ—Ç–æ—Ä—ã–µ:
  - —Å–≤—è–∑–∞–Ω—ã —Å —Ç–µ–º–æ–π **–∫–æ—Å–≤–µ–Ω–Ω–æ**;
  - –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã ("–æ—â—É—â–µ–Ω–∏–µ", "—ç–º–æ—Ü–∏–∏", "—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è", "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "—Å—Ç–∏–ª—å", "–∏–¥–µ—è" –∏ –ø–æ–¥–æ–±–Ω—ã–µ);
  - —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ **—Å–ª—É—á–∞–π–Ω–æ, –µ–¥–∏–Ω–∏—á–Ω–æ –∏–ª–∏ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä**.
- **–†–∞–∑—Ä–µ—à–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ —Å–ª–æ–≤–∞**, –∫–æ—Ç–æ—Ä—ã–µ:
  - –∫–æ—Ä–æ—Ç–∫–∏–µ –∏ —Ç–æ—á–Ω—ã–µ;
  - –º–æ–≥–ª–∏ –±—ã –±—ã—Ç—å –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –¥—Ä—É–≥–æ–≥–æ Telegram-–∫–∞–Ω–∞–ª–∞ —Å —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–π –∂–µ —Ç–µ–º–æ–π;
  - –ø—Ä—è–º–æ –∏ —è–≤–Ω–æ –æ–±–æ–∑–Ω–∞—á–∞—é—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º–∞—Ç–∏–∫—É.

üìå 2. –û–ø—Ä–µ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É –∏–ª–∏ —Ç–µ–º—ã –∫–∞–Ω–∞–ª–∞, —Å—Ç—Ä–æ–≥–æ –≤—ã–±—Ä–∞–≤ –∏—Ö –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞:

{topics}

- –í—ã–±–∏—Ä–∞–π —Ç–æ–ª—å–∫–æ —Ç–µ —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ **–Ω–∞ 100% —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å–º—ã—Å–ª—É –∫–∞–Ω–∞–ª–∞**.
- **–ó–∞–ø—Ä–µ—â–µ–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å —Ç–µ–º—ã, –µ—Å–ª–∏ –æ–Ω–∏ —Å–≤—è–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç–∏—á–Ω–æ –∏–ª–∏ –∫–æ—Å–≤–µ–Ω–Ω–æ.**
- –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ —Ç–µ–º–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–æ—á–Ω–æ ‚Äî —É–∫–∞–∂–∏ "–î—Ä—É–≥–æ–µ".
- **–ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å —Ç–µ–º—ã –≤–Ω–µ —Å–ø–∏—Å–∫–∞.**
- **–ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å —Ç–µ–º—ã –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ**

üéØ –ì–ª–∞–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:
- –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ ‚Äî **–≥–ª–∞–≤–Ω—ã–π –æ—Ä–∏–µ–Ω—Ç–∏—Ä**. –ü–æ—Å—Ç—ã –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
- –ò–≥–Ω–æ—Ä–∏—Ä—É–π —Å–ª–æ–≤–∞ –∏ —Ç–µ–º—ã, –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è **–≤ –æ–¥–Ω–æ–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ—Å—Ç–∞—Ö**, –µ—Å–ª–∏ –æ–Ω–∏ **–Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω–æ –ø–æ –≤—Å–µ–º—É –∫–∞–Ω–∞–ª—É**.
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –æ–±–æ–±—â–µ–Ω–∏—è, —ç–º–æ—Ü–∏–∏, —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞, –º–µ—Ç–∞—Ñ–æ—Ä—ã, —Å—Ç–∏–ª–∏ –∏ –ø—Ä–æ—á–∏–π –º—É—Å–æ—Ä ‚Äî **—Ç–æ–ª—å–∫–æ —Å—É—Ç—å**.

üì§ –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:

–¢–ï–ú–´: —É–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–º—ã –∏–∑ —Å–ø–∏—Å–∫–∞. –ï—Å–ª–∏ —Ç–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ, —Ç–æ –ø–∏—à–∏ –∫–∞–∂–¥—É—é —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.
–ö–õ–Æ–ß–ï–í–´–ï_–°–õ–û–í–ê: —Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏–µ, —Ç–æ—á–Ω—ã–µ, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å–ª–æ–≤–∞, –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ. –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.

–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."""

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot_data = {
    'settings': {
        'max_channels': 150,
        'posts_range': (1, 5),
        'delay_range': (20, 1000),
        'target_channel': 'https://t.me/cosmoptichka5',
        'topics': ['–ú–æ–¥–∞ –∏ –∫—Ä–∞—Å–æ—Ç–∞', '–ë–∏–∑–Ω–µ—Å –∏ —Å—Ç–∞—Ä—Ç–∞–ø—ã', '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥, PR, —Ä–µ–∫–ª–∞–º–∞'],
        'keywords': ['–±—Ä–µ–Ω–¥', '–º–æ–¥–∞', 'fashion', 'beauty', '–∑–∞–ø—É—Å–∫ –±—Ä–µ–Ω–¥–∞', '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', '—É–ø–∞–∫–æ–≤–∫–∞', 'WB', 'Wildberries', 'Ozon', '—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞', '–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞'],
        'track_new_posts': False
    },
    'prompts': {
        'comment_prompt': DEFAULT_COMMENT_PROMPT,
        'analysis_prompt': DEFAULT_ANALYSIS_PROMPT
    },
    'statistics': {
        'comments_sent': 0,
        'channels_processed': 0,
        'reactions_set': 0
    },
    'active_users': set(),
    'admin_user': None,
    'is_running': False,
    'telethon_client': None,  # –ï–¥–∏–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    'selected_topics': set(),
    'pending_manual_setup': {},
    'user_states': {},
    'detailed_statistics': {
        'processed_channels': {},
        'queue_channels': [],
        'found_channels': []
    },
    'initialization_complete': False,
    'new_post_tracker': None,
    'active_messages': {
        'statistics': {},  # {user_id: {'message_id': id, 'chat_id': chat_id}}
        'settings': {}     # {user_id: {'message_id': id, 'chat_id': chat_id}}
    }
}

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã
AVAILABLE_TOPICS = [
    '–ë–∏–∑–Ω–µ—Å –∏ —Å—Ç–∞—Ä—Ç–∞–ø—ã', '–ë–ª–æ–≥–∏', '–ë—É–∫–º–µ–∫–µ—Ä—Å—Ç–≤–æ', '–í–∏–¥–µ–æ –∏ —Ñ–∏–ª—å–º—ã', '–î–∞—Ä–∫–Ω–µ—Ç',
    '–î–∏–∑–∞–π–Ω', '–î–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö', '–ï–¥–∞ –∏ –∫—É–ª–∏–Ω–∞—Ä–∏—è', '–ó–¥–æ—Ä–æ–≤—å–µ –∏ –§–∏—Ç–Ω–µ—Å', '–ò–≥—Ä—ã',
    '–ò–Ω—Å—Ç–∞–≥—Ä–∞–º', '–ò–Ω—Ç–µ—Ä—å–µ—Ä –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '–ò—Å–∫—É—Å—Å—Ç–≤–æ', '–ö–∞—Ä—Ç–∏–Ω–∫–∏ –∏ —Ñ–æ—Ç–æ',
    '–ö–∞—Ä—å–µ—Ä–∞', '–ö–Ω–∏–≥–∏', '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', '–ö—É—Ä—Å—ã –∏ –≥–∞–π–¥—ã', '–õ–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞',
    '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥, PR, —Ä–µ–∫–ª–∞–º–∞', '–ú–µ–¥–∏—Ü–∏–Ω–∞', '–ú–æ–¥–∞ –∏ –∫—Ä–∞—Å–æ—Ç–∞', '–ú—É–∑—ã–∫–∞',
    '–ù–æ–≤–æ—Å—Ç–∏ –∏ –°–ú–ò', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–ü–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–æ–µ', '–ü–æ–ª–∏—Ç–∏–∫–∞', '–ü—Ä–∞–≤–æ',
    '–ü—Ä–∏—Ä–æ–¥–∞', '–ü—Ä–æ–¥–∞–∂–∏', '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–†–µ–ª–∏–≥–∏—è', '–†—É–∫–æ–¥–µ–ª–∏–µ',
    '–°–µ–º—å—è –∏ –¥–µ—Ç–∏', '–°–æ—Ñ—Ç –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', '–°–ø–æ—Ä—Ç', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
    '–¶–∏—Ç–∞—Ç—ã', '–®–æ–∫-–∫–æ–Ω—Ç–µ–Ω—Ç', '–≠–∑–æ—Ç–µ—Ä–∏–∫–∞', '–≠–∫–æ–Ω–æ–º–∏–∫–∞', '–≠—Ä–æ–∫—Ç–∏–∫–∞',
    '–Æ–º–æ—Ä –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–î—Ä—É–≥–æ–µ'
]

def simple_encrypt(text, key="telegram_mass_looker_2024"):
    """–ü—Ä–æ—Å—Ç–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ"""
    if not text:
        return ""
    key_nums = [ord(c) for c in key]
    encrypted = []
    for i, char in enumerate(text):
        key_char = key_nums[i % len(key_nums)]
        encrypted_char = chr((ord(char) + key_char) % 256)
        encrypted.append(encrypted_char)
    encrypted_text = ''.join(encrypted)
    return base64.b64encode(encrypted_text.encode('latin-1')).decode()

def simple_decrypt(encrypted_text, key="telegram_mass_looker_2024"):
    """–ü—Ä–æ—Å—Ç–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞"""
    if not encrypted_text:
        return ""
    try:
        encrypted_bytes = base64.b64decode(encrypted_text.encode())
        encrypted = encrypted_bytes.decode('latin-1')
        key_nums = [ord(c) for c in key]
        decrypted = []
        for i, char in enumerate(encrypted):
            key_char = key_nums[i % len(key_nums)]
            decrypted_char = chr((ord(char) - key_char) % 256)
            decrypted.append(decrypted_char)
        return ''.join(decrypted)
    except Exception:
        return ""

async def save_bot_state():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –ø–∞–∫–µ—Ç–Ω–æ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        bot_state_data = [
            ('settings', bot_data['settings']),
            ('prompts', bot_data['prompts']),
            ('admin_user', bot_data['admin_user']),
            ('is_running', bot_data['is_running']),
            ('detailed_statistics', bot_data['detailed_statistics'])
        ]
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–∫–µ—Ç–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
        for key, value in bot_state_data:
            await db.save_bot_state(key, value)
        
        await db.save_statistics(bot_data['statistics'])
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å—é —Å–µ—Å—Å–∏—é, –∞ —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º state
        for user_id, state in bot_data['user_states'].items():
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
            existing_session = await db.load_user_session(user_id)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ state, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            existing_session['state'] = state
            await db.save_user_session(user_id, existing_session)
        
        logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞: {e}")

async def load_bot_state():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–µ—à–∞ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        settings = await db.load_bot_state('settings', bot_data['settings'])
        if settings:
            bot_data['settings'] = settings
        
        prompts = await db.load_bot_state('prompts', bot_data['prompts'])
        if prompts:
            bot_data['prompts'] = prompts
        
        admin_user = await db.load_bot_state('admin_user')
        if admin_user:
            bot_data['admin_user'] = admin_user
        
        is_running = await db.load_bot_state('is_running', False)
        bot_data['is_running'] = is_running
        
        detailed_statistics = await db.load_bot_state('detailed_statistics', bot_data['detailed_statistics'])
        bot_data['detailed_statistics'] = detailed_statistics
        
        statistics = await db.load_statistics()
        bot_data['statistics'] = statistics
        
        # –ü–û–î–†–û–ë–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–µ—à —Å–µ—Å—Å–∏–π –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
        try:
            import aiosqlite
            import os
            logger.info("üîç DEBUG: –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ —Å–µ—Å—Å–∏–π –∏–∑ –ë–î")
            
            async with aiosqlite.connect(db.db_file) as conn:
                logger.info(f"üîç DEBUG: –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –ë–î: {db.db_file}")
                
                async with conn.execute('SELECT user_id, session_data FROM user_sessions') as cursor:
                    rows = await cursor.fetchall()
                    logger.info(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ {len(rows)} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ user_sessions")
                    
                    for row in rows:
                        user_id, session_json = row
                        logger.info(f"üîç DEBUG: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                        logger.info(f"üîç DEBUG: –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î: {session_json[:200] if session_json else 'None'}...")
                        
                        if session_json:
                            try:
                                session_data = json.loads(session_json)
                                logger.info(f"üîç DEBUG: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏: {session_data}")
                                
                                # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏ Telethon
                                session_file = f'user_session_{user_id}.session'
                                session_file_exists = os.path.exists(session_file)
                                logger.info(f"üîç DEBUG: –§–∞–π–ª —Å–µ—Å—Å–∏–∏ {session_file} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {session_file_exists}")
                                
                                if session_file_exists:
                                    # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–∞–ª—å–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
                                    user_sessions_cache[int(user_id)] = session_data
                                    logger.info(f"‚úÖ DEBUG: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –∫–µ—à–µ —Å —Ñ–∞–π–ª–æ–º —Å–µ—Å—Å–∏–∏")
                                    logger.info(f"üîç DEBUG: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–µ—à–∞ –¥–ª—è {user_id}: {user_sessions_cache[int(user_id)]}")
                                else:
                                    # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ë–î
                                    logger.warning(f"‚ö†Ô∏è DEBUG: –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
                                    session_data['has_active_client'] = False
                                    session_data['is_running'] = False
                                    await db.save_user_session(int(user_id), session_data)
                                    user_sessions_cache[int(user_id)] = session_data
                                    logger.info(f"üîç DEBUG: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–µ—à–∞ –¥–ª—è {user_id}: {user_sessions_cache[int(user_id)]}")
                                    
                            except Exception as e:
                                logger.error(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                        else:
                            logger.warning(f"‚ö†Ô∏è DEBUG: –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞ —Å–µ—Å—Å–∏–π: {e}")
        
        logger.info(f"‚úÖ DEBUG: –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(user_sessions_cache)} —Å–µ—Å—Å–∏–π –≤ –∫–µ—à–µ")
        logger.info(f"üîç DEBUG: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ–≥–æ –∫–µ—à–∞: {user_sessions_cache}")
    except Exception as e:
        logger.error(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞: {e}")

async def get_user_telethon_client(user_id: int) -> Optional[TelegramClient]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ Telethon –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î, –∞ –ù–ï –∏–∑ –∫–µ—à–∞
        session_data = await db.load_user_session(user_id)
        client_config = session_data.get('client_config')
        
        if not client_config:
            logger.debug(f"–ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return None
            
        if not all(key in client_config for key in ['api_id', 'api_hash', 'phone']):
            logger.debug(f"–ù–µ–ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ api_id —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
        try:
            api_id = int(client_config['api_id'])
        except (ValueError, TypeError):
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return None
            
        session_file = f'user_session_{user_id}'
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏
        import os
        if not os.path.exists(f'{session_file}.session'):
            logger.warning(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏ {session_file}.session –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ë–î –∏ –∫–µ—à–µ
            session_data['has_active_client'] = False
            session_data['is_running'] = False
            await db.save_user_session(user_id, session_data)
            if user_id in user_sessions_cache:
                user_sessions_cache[user_id] = session_data
            return None
            
        loop = asyncio.get_event_loop()
        
        client = TelegramClient(
            session_file,
            api_id,
            client_config['api_hash'],
            loop=loop,
            timeout=30,
            retry_delay=1,
            flood_sleep_threshold=60
        )
        
        await client.connect()
        
        if await client.is_user_authorized():
            logger.info(f"–ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ–∑–¥–∞–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return client
        else:
            await client.disconnect()
            logger.debug(f"–ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            session_data['has_active_client'] = False
            session_data['is_running'] = False
            await db.save_user_session(user_id, session_data)
            if user_id in user_sessions_cache:
                user_sessions_cache[user_id] = session_data
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, edit=True):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    user_id = update.effective_user.id
    
    welcome_text = """ü§ñ –°–∏—Å—Ç–µ–º–∞ –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞ –∏ –º–∞—Å—Å—Ä–µ–∞–∫—à–µ–Ω–∞

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    logger.info(f"üîç DEBUG: show_main_menu –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    logger.info(f"üîç DEBUG: –¢–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–µ—à–∞ –¥–ª—è {user_id}: {user_sessions_cache.get(user_id, '–ù–ï–¢ –í –ö–ï–®–ï')}")
    
    # –ü–û–î–†–û–ë–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    try:
        logger.info(f"üîç DEBUG: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        user_session = await db.load_user_session(user_id)
        logger.info(f"üîç DEBUG: –î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î: {user_session}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –ë–î –æ—Ç –∫–µ—à–∞
        cached_data = user_sessions_cache.get(user_id, {})
        if user_session != cached_data:
            logger.warning(f"‚ö†Ô∏è DEBUG: –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï! –ë–î ‚â† –ö–ï–®")
            logger.warning(f"üîç DEBUG: –ë–î —Å–æ–¥–µ—Ä–∂–∏—Ç: {user_session}")
            logger.warning(f"üîç DEBUG: –ö–ï–® —Å–æ–¥–µ—Ä–∂–∏—Ç: {cached_data}")
        else:
            logger.info(f"‚úÖ DEBUG: –ë–î –∏ –ö–ï–® —Å–æ–≤–ø–∞–¥–∞—é—Ç")
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        user_sessions_cache[user_id] = user_session.copy()
        logger.info(f"üîç DEBUG: –ö–µ—à –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_sessions_cache[user_id]}")
        
        has_client = user_session.get('has_active_client', False)
        client_config = user_session.get('client_config', {})
        is_running = user_session.get('is_running', False)
        
        logger.info(f"üîç DEBUG: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
        logger.info(f"üîç DEBUG: has_active_client = {has_client}")
        logger.info(f"üîç DEBUG: client_config = {client_config}")
        logger.info(f"üîç DEBUG: is_running = {is_running}")
        
        logger.info(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: has_client={has_client}, config_present={bool(client_config)}, is_running={is_running}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏
        if has_client and client_config:
            import os
            session_file = f'user_session_{user_id}.session'
            session_file_exists = os.path.exists(session_file)
            logger.info(f"üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ {session_file}: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç = {session_file_exists}")
            
            if not session_file_exists:
                logger.warning(f"‚ö†Ô∏è DEBUG: –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏")
                has_client = False
                is_running = False
                # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î –∏ –∫–µ—à
                user_session['has_active_client'] = False
                user_session['is_running'] = False
                await db.save_user_session(user_id, user_session)
                user_sessions_cache[user_id] = user_session.copy()
                logger.info(f"üîç DEBUG: –§–ª–∞–≥–∏ —Å–±—Ä–æ—à–µ–Ω—ã –≤ –ë–î –∏ –∫–µ—à–µ")
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
                required_fields = ['api_id', 'api_hash', 'phone']
                missing_fields = [field for field in required_fields if not client_config.get(field)]
                logger.info(f"üîç DEBUG: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç {missing_fields}")
                
                if missing_fields:
                    logger.warning(f"‚ö†Ô∏è DEBUG: –ù–µ–ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
                    has_client = False  # –õ–æ–∫–∞–ª—å–Ω–æ –º–µ–Ω—è–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        logger.info(f"‚úÖ DEBUG: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: has_client={has_client}, is_running={is_running}")
        
    except Exception as e:
        logger.error(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        import traceback
        logger.error(f"‚ùå DEBUG: –ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
        has_client = False
        is_running = False
    
    account_button_text = "üë§ –°–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç" if has_client else "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"
    run_button_text = "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É" if is_running else "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"
    
    logger.info(f"üîç DEBUG: –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏: account='{account_button_text}', run='{run_button_text}'")
    
    keyboard = [
        [InlineKeyboardButton(account_button_text, callback_data="account_setup")],
        [InlineKeyboardButton("üì∫ –í—ã–±—Ä–∞—Ç—å —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª", callback_data="target_channel")],
        [InlineKeyboardButton("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞", callback_data="settings")],
        [InlineKeyboardButton("üìã –ü—Ä–æ–º—Ç—ã", callback_data="prompts")],
        [InlineKeyboardButton(run_button_text, callback_data="toggle_run")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    bot_data['user_states'][user_id] = 'main_menu'
    
    channel_message_id = context.user_data.get('channel_selection_message_id')
    awaiting_channel = context.user_data.get('awaiting_channel')
    
    if channel_message_id:
        try:
            await context.bot.delete_message(
                chat_id=user_id,
                message_id=channel_message_id
            )
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞: {e}")
    
    if awaiting_channel:
        try:
            from telegram import ReplyKeyboardRemove
            await context.bot.send_message(
                chat_id=user_id,
                text="",
                reply_markup=ReplyKeyboardRemove()
            )
        except:
            pass
    
    context.user_data.clear()
    
    asyncio.create_task(save_bot_state())
    
    if edit and update.callback_query:
        try:
            await update.callback_query.edit_message_text(welcome_text, reply_markup=reply_markup)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            await update.callback_query.message.reply_text(welcome_text, reply_markup=reply_markup)
    else:
        if update.callback_query:
            await update.callback_query.message.reply_text(welcome_text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def update_user_session_cache(user_id: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_session = await db.load_user_session(user_id)
        user_sessions_cache[user_id] = user_session.copy()
        logger.info(f"–ö–µ—à —Å–µ—Å—Å–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_session}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def process_telegram_code(update: Update, context: ContextTypes.DEFAULT_TYPE, code: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    try:
        client = context.user_data['client']
        phone_code_hash = context.user_data['phone_code_hash']
        config = context.user_data.get('config', {})
        
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –∫–æ–¥–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        await client.sign_in(
            phone=config['phone'],
            code=code,
            phone_code_hash=phone_code_hash
        )
        
        logger.info(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –∫–æ–¥—É —É—Å–ø–µ—à–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {config}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        session_data = {
            'client_config': config,
            'has_active_client': True,
            'state': 'main_menu'
        }
        
        await db.save_user_session(user_id, session_data)
        logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –ü–û–°–õ–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        await update_user_session_cache(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
        saved_session = await db.load_user_session(user_id)
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {saved_session}")
        
        await client.disconnect()
        
        await update.callback_query.edit_message_text("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç!")
        context.user_data.clear()
        
        await show_main_menu(update, context, edit=False)
        return
        
    except SessionPasswordNeededError:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
        keyboard = [[get_back_button()]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:",
            reply_markup=reply_markup
        )
        context.user_data['setup_step'] = 'password'
        bot_data['user_states'][user_id] = 'password'
        return
        
    except PhoneCodeInvalidError:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await update.callback_query.edit_message_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n"
            f"–í–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥: {context.user_data['entered_code']}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
            reply_markup=get_code_input_keyboard()
        )
        context.user_data['entered_code'] = ''
        return
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —Å –∫–æ–¥–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        keyboard = [[get_back_button()]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}", reply_markup=reply_markup)

async def handle_telegram_password(update: Update, context: ContextTypes.DEFAULT_TYPE, password: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è Telegram –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    try:
        client = context.user_data.get('client')
        if not client:
            await show_error_with_back_button(update, context, "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–Ω–æ–≤–æ.")
            return
        
        logger.info(f"üîç DEBUG: –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        await client.sign_in(password=password)
        
        config = context.user_data.get('config', {})
        config['password'] = password
        
        logger.info(f"‚úÖ DEBUG: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ø–∞—Ä–æ–ª–µ–º —É—Å–ø–µ—à–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        logger.info(f"üîç DEBUG: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {config}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        session_data = {
            'client_config': config,
            'has_active_client': True,
            'state': 'main_menu'
        }
        
        logger.info(f"üîç DEBUG: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {session_data}")
        await db.save_user_session(user_id, session_data)
        logger.info(f"‚úÖ DEBUG: –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –ü–û–°–õ–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        user_sessions_cache[user_id] = session_data.copy()
        logger.info(f"üîç DEBUG: –ö–µ—à –æ–±–Ω–æ–≤–ª–µ–Ω: {user_sessions_cache[user_id]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
        saved_session = await db.load_user_session(user_id)
        logger.info(f"üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å –≤ –ë–î: {saved_session}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
        import os
        session_file = f'user_session_{user_id}.session'
        session_file_exists = os.path.exists(session_file)
        logger.info(f"üîç DEBUG: –§–∞–π–ª —Å–µ—Å—Å–∏–∏ {session_file} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {session_file_exists}")
        
        await client.disconnect()
        
        await update.message.reply_text("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç!")
        context.user_data.clear()
        await show_main_menu(update, context, edit=False)
        
    except PasswordHashInvalidError:
        logger.warning(f"‚ö†Ô∏è DEBUG: –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await show_error_with_back_button(update, context, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    except Exception as e:
        logger.error(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —Å –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        import traceback
        logger.error(f"‚ùå DEBUG: –ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
        await show_error_with_back_button(update, context, f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}")
        
        if 'client' in context.user_data:
            try:
                await context.user_data['client'].disconnect()
            except:
                pass
            context.user_data.clear()

def load_user_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    config_file = 'config.json'
    if os.path.exists(config_file):
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
            for key in ['api_id', 'api_hash', 'phone', 'password']:
                if key in config and config[key]:
                    config[key] = simple_decrypt(config[key])
            return config
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    return {}

async def update_user_session_cache(user_id: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_session = await db.load_user_session(user_id)
        user_sessions_cache[user_id] = user_session
        logger.info(f"–ö–µ—à —Å–µ—Å—Å–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_session}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def save_user_config(config):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    config_file = 'config.json'
    try:
        existing_config = {}
        if os.path.exists(config_file):
            with open(config_file, 'r', encoding='utf-8') as f:
                existing_config = json.load(f)
        
        existing_config.update(config)
        
        # –®–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        encrypted_config = existing_config.copy()
        for key in ['api_id', 'api_hash', 'phone', 'password']:
            if key in encrypted_config and encrypted_config[key]:
                encrypted_config[key] = simple_encrypt(encrypted_config[key])
        
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(encrypted_config, f, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

def check_access(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return True

def get_back_button():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
    return InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")

def get_main_menu_keyboard(user_id: int = None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id:
        has_client = False
        is_running = False
    else:
        has_client = False
        is_running = bot_data.get('is_running', False)
    
    account_button_text = "üë§ –°–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç" if has_client else "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"
    run_button_text = "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É" if is_running else "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"
    
    keyboard = [
        [InlineKeyboardButton(account_button_text, callback_data="account_setup")],
        [InlineKeyboardButton("üì∫ –í—ã–±—Ä–∞—Ç—å —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª", callback_data="target_channel")],
        [InlineKeyboardButton("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞", callback_data="settings")],
        [InlineKeyboardButton("üìã –ü—Ä–æ–º—Ç—ã", callback_data="prompts")],
        [InlineKeyboardButton(run_button_text, callback_data="toggle_run")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")]
    ]
    
    return InlineKeyboardMarkup(keyboard)

def get_code_input_keyboard():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞"""
    keyboard = [
        [InlineKeyboardButton("1", callback_data="code_1"),
         InlineKeyboardButton("2", callback_data="code_2"),
         InlineKeyboardButton("3", callback_data="code_3")],
        [InlineKeyboardButton("4", callback_data="code_4"),
         InlineKeyboardButton("5", callback_data="code_5"),
         InlineKeyboardButton("6", callback_data="code_6")],
        [InlineKeyboardButton("7", callback_data="code_7"),
         InlineKeyboardButton("8", callback_data="code_8"),
         InlineKeyboardButton("9", callback_data="code_9")],
        [InlineKeyboardButton("–æ—Ç–ø—Ä–∞–≤–∏—Ç—å ‚úÖ", callback_data="code_send"),
         InlineKeyboardButton("0", callback_data="code_0"),
         InlineKeyboardButton("—Å—Ç–µ—Ä–µ—Ç—å ‚¨ÖÔ∏è", callback_data="code_delete")],
        [InlineKeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ", callback_data="code_resend")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="code_cancel")]
    ]
    
    return InlineKeyboardMarkup(keyboard)

async def get_post_comments(message_id: int, channel_entity) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç—É"""
    try:
        if not bot_data['telethon_client']:
            logger.warning("Telethon –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return ""
        
        # –ü–æ–ª—É—á–∞–µ–º discussion message —á–µ—Ä–µ–∑ GetDiscussionMessageRequest
        discussion_info = await bot_data['telethon_client'](GetDiscussionMessageRequest(
            peer=channel_entity,
            msg_id=message_id
        ))
        
        if not discussion_info or not discussion_info.messages:
            return ""
        
        discussion_message = discussion_info.messages[0]
        discussion_group = discussion_message.peer_id
        reply_to_msg_id = discussion_message.id
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ —ç—Ç–æ—Ç –ø–æ—Å—Ç (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
        replies = await bot_data['telethon_client'](GetRepliesRequest(
            peer=discussion_group,
            msg_id=reply_to_msg_id,
            offset_date=None,
            offset_id=0,
            offset_peer=None,
            limit=50
        ))
        
        if not replies or not replies.messages:
            return ""
        
        comments = []
        total_length = 0
        max_length = 10000
        
        for msg in replies.messages:
            if msg.message and msg.message.strip():
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                sender_name = "–ê–Ω–æ–Ω–∏–º"
                try:
                    if hasattr(msg, 'from_id') and msg.from_id:
                        sender = await bot_data['telethon_client'].get_entity(msg.from_id)
                        if hasattr(sender, 'first_name'):
                            sender_name = sender.first_name
                            if hasattr(sender, 'last_name') and sender.last_name:
                                sender_name += f" {sender.last_name}"
                        elif hasattr(sender, 'title'):
                            sender_name = sender.title
                except:
                    pass
                
                comment_text = f"{sender_name}: {msg.message.strip()}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –¥–ª–∏–Ω—ã
                if total_length + len(comment_text) + 2 > max_length:
                    break
                
                comments.append(comment_text)
                total_length += len(comment_text) + 2
        
        return "\n\n".join(comments)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
        return ""

async def show_prompts_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º—Ç–∞–º–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not check_access(user_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω", show_alert=True)
        return
    
    bot_data['user_states'][user_id] = 'prompts_menu'
    asyncio.create_task(save_bot_state())
    
    comment_prompt = bot_data['prompts']['comment_prompt']
    analysis_prompt = bot_data['prompts']['analysis_prompt']
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã
    def escape_html(text):
        return text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
    
    message_text = f"""<b>‚úçüèª –ü–û–õ–ù–´–ô –ø—Ä–æ–º—Ç –Ω–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:</b>

<code>{escape_html(comment_prompt)}</code>

‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

<b>üîç –ü–û–õ–ù–´–ô –ø—Ä–æ–º—Ç –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞:</b>

<code>{escape_html(analysis_prompt)}</code>

‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

<b>üîÅ –ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º—Ç—ã:</b>

<b>–î–ª—è —Å–º–µ–Ω—ã –ø—Ä–æ–º—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:</b>
<code>–ü—Ä–æ–º—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: –≤–∞—à –Ω–æ–≤—ã–π –ø—Ä–æ–º—Ç</code>

<b>–î–ª—è —Å–º–µ–Ω—ã –ø—Ä–æ–º—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:</b>
<code>–ü—Ä–æ–º—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: –≤–∞—à –Ω–æ–≤—ã–π –ø—Ä–æ–º—Ç</code>

<b>–ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã:</b>
‚Ä¢ <code>{{text_of_the_post}}</code> - —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
‚Ä¢ <code>{{topics}}</code> - —Ç–µ–º—ã –∫–∞–Ω–∞–ª–∞  
‚Ä¢ <code>{{comments}}</code> - –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
‚Ä¢ <code>{{full_text}}</code> - –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞"""
    
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
        [InlineKeyboardButton("üîÅ –°–±—Ä–æ—Å–∏—Ç—å", callback_data="reset_prompts")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        message_text, 
        reply_markup=reply_markup, 
        parse_mode=ParseMode.HTML
    )

async def handle_prompt_change(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º—Ç–æ–≤"""
    user_id = update.effective_user.id
    
    if text.startswith("–ü—Ä–æ–º—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:"):
        new_prompt = text.replace("–ü—Ä–æ–º—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:", "").strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
        if "{text_of_the_post}" not in new_prompt:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –í –ø—Ä–æ–º—Ç–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä <code>{text_of_the_post}</code>",
                parse_mode=ParseMode.HTML
            )
            return
        
        bot_data['prompts']['comment_prompt'] = new_prompt
        await save_bot_state()
        
        await update.message.reply_text("‚úÖ –ü—Ä–æ–ºÿ™ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–º—Ç–∞–º–∏
        await show_prompts_menu_updated(update, context)
        
    elif text.startswith("–ü—Ä–æ–º—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:"):
        new_prompt = text.replace("–ü—Ä–æ–º—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", "").strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
        required_placeholders = ["{full_text}", "{topics}"]
        missing_placeholders = []
        
        for placeholder in required_placeholders:
            if placeholder not in new_prompt:
                missing_placeholders.append(placeholder)
        
        if missing_placeholders:
            escaped_placeholders = [f"<code>{p}</code>" for p in missing_placeholders]
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: –í –ø—Ä–æ–º—Ç–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã: {', '.join(escaped_placeholders)}",
                parse_mode=ParseMode.HTML
            )
            return
        
        bot_data['prompts']['analysis_prompt'] = new_prompt
        await save_bot_state()
        
        await update.message.reply_text("‚úÖ –ü—Ä–æ–º—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–º—Ç–∞–º–∏
        await show_prompts_menu_updated(update, context)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–∞ –ø—Ä–æ–º—Ç–∞
        if "–ü—Ä–æ–º—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:" in text and "–ü—Ä–æ–º—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:" in text:
            lines = text.split('\n')
            comment_section = []
            analysis_section = []
            current_section = None
            
            for line in lines:
                if line.startswith("–ü—Ä–æ–º—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:"):
                    current_section = "comment"
                    comment_section.append(line.replace("–ü—Ä–æ–º—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:", "").strip())
                elif line.startswith("–ü—Ä–æ–º—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:"):
                    current_section = "analysis"
                    analysis_section.append(line.replace("–ü—Ä–æ–º—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", "").strip())
                elif current_section == "comment":
                    comment_section.append(line)
                elif current_section == "analysis":
                    analysis_section.append(line)
            
            comment_prompt = '\n'.join(comment_section).strip()
            analysis_prompt = '\n'.join(analysis_section).strip()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            if "{text_of_the_post}" not in comment_prompt:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: –í –ø—Ä–æ–º—Ç–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä <code>{text_of_the_post}</code>",
                    parse_mode=ParseMode.HTML
                )
                return
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
            required_placeholders = ["{full_text}", "{topics}"]
            missing_placeholders = []
            
            for placeholder in required_placeholders:
                if placeholder not in analysis_prompt:
                    missing_placeholders.append(placeholder)
            
            if missing_placeholders:
                escaped_placeholders = [f"<code>{p}</code>" for p in missing_placeholders]
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞: –í –ø—Ä–æ–º—Ç–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã: {', '.join(escaped_placeholders)}",
                    parse_mode=ParseMode.HTML
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–∞ –ø—Ä–æ–º—Ç–∞
            bot_data['prompts']['comment_prompt'] = comment_prompt
            bot_data['prompts']['analysis_prompt'] = analysis_prompt
            await save_bot_state()
            
            await update.message.reply_text("‚úÖ –û–±–∞ –ø—Ä–æ–º—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–º—Ç–∞–º–∏
            await show_prompts_menu_updated(update, context)
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<code>–ü—Ä–æ–º—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: –≤–∞—à –ø—Ä–æ–º—Ç</code> –∏–ª–∏\n<code>–ü—Ä–æ–º—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: –≤–∞—à –ø—Ä–æ–º—Ç</code>",
                parse_mode=ParseMode.HTML
            )

async def show_prompts_menu_updated(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–º—Ç–æ–≤"""
    user_id = update.effective_user.id
    
    comment_prompt = bot_data['prompts']['comment_prompt']
    analysis_prompt = bot_data['prompts']['analysis_prompt']
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã
    def escape_html(text):
        return text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
    
    message_text = f"""<b>‚úçüèª –ü–û–õ–ù–´–ô –ø—Ä–æ–º—Ç –Ω–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:</b>

<code>{escape_html(comment_prompt)}</code>

‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

<b>üîç –ü–û–õ–ù–´–ô –ø—Ä–æ–º—Ç –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞:</b>

<code>{escape_html(analysis_prompt)}</code>

‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

<b>üîÅ –ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º—Ç—ã:</b>

<b>–î–ª—è —Å–º–µ–Ω—ã –ø—Ä–æ–º—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:</b>
<code>–ü—Ä–æ–º—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: –≤–∞—à –Ω–æ–≤—ã–π –ø—Ä–æ–º—Ç</code>

<b>–î–ª—è —Å–º–µ–Ω—ã –ø—Ä–æ–º—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:</b>
<code>–ü—Ä–æ–º—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: –≤–∞—à –Ω–æ–≤—ã–π –ø—Ä–æ–º—Ç</code>

<b>–ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã:</b>
‚Ä¢ <code>{{text_of_the_post}}</code> - —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
‚Ä¢ <code>{{topics}}</code> - —Ç–µ–º—ã –∫–∞–Ω–∞–ª–∞  
‚Ä¢ <code>{{comments}}</code> - –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
‚Ä¢ <code>{{full_text}}</code> - –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞"""
    
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
        [InlineKeyboardButton("üîÅ –°–±—Ä–æ—Å–∏—Ç—å", callback_data="reset_prompts")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=user_id,
        text=message_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

async def reset_prompts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–æ—Å –ø—Ä–æ–º—Ç–æ–≤ –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ"""
    query = update.callback_query
    await query.answer()
    
    bot_data['prompts']['comment_prompt'] = DEFAULT_COMMENT_PROMPT
    bot_data['prompts']['analysis_prompt'] = DEFAULT_ANALYSIS_PROMPT
    await save_bot_state()
    
    await query.answer("‚úÖ –ü—Ä–æ–º—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ", show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await show_prompts_menu(update, context)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, edit=True):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    user_id = update.effective_user.id
    
    welcome_text = """ü§ñ –°–∏—Å—Ç–µ–º–∞ –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞ –∏ –º–∞—Å—Å—Ä–µ–∞–∫—à–µ–Ω–∞

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–°–ï–ì–î–ê –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–µ—à
    try:
        user_session = await db.load_user_session(user_id)
        logger.info(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –°–í–ï–ñ–ê–Ø —Å–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_session}")
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        user_sessions_cache[user_id] = user_session.copy()
        logger.info(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –∫–µ—à –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_sessions_cache[user_id]}")
        
        has_client = user_session.get('has_active_client', False)
        client_config = user_session.get('client_config', {})
        is_running = user_session.get('is_running', False)
        
        logger.info(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: has_client={has_client}, config_present={bool(client_config)}, is_running={is_running}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏
        if has_client and client_config:
            import os
            session_file = f'user_session_{user_id}.session'
            if not os.path.exists(session_file):
                logger.warning(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏")
                has_client = False
                is_running = False
                # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î –∏ –∫–µ—à
                user_session['has_active_client'] = False
                user_session['is_running'] = False
                await db.save_user_session(user_id, user_session)
                user_sessions_cache[user_id] = user_session.copy()
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
                required_fields = ['api_id', 'api_hash', 'phone']
                missing_fields = [field for field in required_fields if not client_config.get(field)]
                
                if missing_fields:
                    logger.warning(f"–ù–µ–ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
                    has_client = False  # –õ–æ–∫–∞–ª—å–Ω–æ –º–µ–Ω—è–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        logger.info(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: has_client={has_client}, is_running={is_running}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        has_client = False
        is_running = False
    
    account_button_text = "üë§ –°–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç" if has_client else "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"
    run_button_text = "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É" if is_running else "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"
    
    keyboard = [
        [InlineKeyboardButton(account_button_text, callback_data="account_setup")],
        [InlineKeyboardButton("üì∫ –í—ã–±—Ä–∞—Ç—å —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª", callback_data="target_channel")],
        [InlineKeyboardButton("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞", callback_data="settings")],
        [InlineKeyboardButton("üìã –ü—Ä–æ–º—Ç—ã", callback_data="prompts")],
        [InlineKeyboardButton(run_button_text, callback_data="toggle_run")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    bot_data['user_states'][user_id] = 'main_menu'
    
    channel_message_id = context.user_data.get('channel_selection_message_id')
    awaiting_channel = context.user_data.get('awaiting_channel')
    
    if channel_message_id:
        try:
            await context.bot.delete_message(
                chat_id=user_id,
                message_id=channel_message_id
            )
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞: {e}")
    
    if awaiting_channel:
        try:
            from telegram import ReplyKeyboardRemove
            await context.bot.send_message(
                chat_id=user_id,
                text="",
                reply_markup=ReplyKeyboardRemove()
            )
        except:
            pass
    
    context.user_data.clear()
    
    asyncio.create_task(save_bot_state())
    
    if edit and update.callback_query:
        try:
            await update.callback_query.edit_message_text(welcome_text, reply_markup=reply_markup)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            await update.callback_query.message.reply_text(welcome_text, reply_markup=reply_markup)
    else:
        if update.callback_query:
            await update.callback_query.message.reply_text(welcome_text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    
    if not check_access(user_id):
        keyboard = [[get_back_button()]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω", reply_markup=reply_markup)
        return
    
    if bot_data['admin_user'] is None:
        bot_data['admin_user'] = user_id
        asyncio.create_task(save_bot_state())
    
    bot_data['active_users'].add(user_id)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    await show_main_menu(update, context, edit=False)

async def handle_back_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    try:
        user_id = update.effective_user.id
        if not check_access(user_id):
            return

        # –û—á–∏—â–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot_data['active_messages']['statistics'].pop(user_id, None)
        bot_data['active_messages']['settings'].pop(user_id, None)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥': {e}")
        await show_error_with_back_button(update, context, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

async def show_error_with_back_button(update: Update, context: ContextTypes.DEFAULT_TYPE, error_message: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
    keyboard = [[get_back_button()]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(error_message, reply_markup=reply_markup)
    else:
        await update.message.reply_text(error_message, reply_markup=reply_markup)

async def account_setup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not check_access(user_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω", show_alert=True)
        return
    
    bot_data['user_states'][user_id] = 'account_setup'
    asyncio.create_task(save_bot_state())
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_session = await db.load_user_session(user_id)
    config = user_session.get('client_config', {})
    
    if not config.get('api_id') or not config.get('api_hash'):
        keyboard = [[get_back_button()]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
            "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –∞–∫–∫–∞—É–Ω—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å API ID –∏ API Hash.\n\n"
            "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://my.telegram.org\n"
            "2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç\n"
            "3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ 'API development tools'\n"
            "4. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ API ID:",
            reply_markup=reply_markup
        )
        context.user_data['setup_step'] = 'api_id'
        bot_data['user_states'][user_id] = 'api_id'
        asyncio.create_task(save_bot_state())
        return
    
    keyboard = [[get_back_button()]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
        "API ID –∏ API Hash –Ω–∞–π–¥–µ–Ω—ã.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79123456789):",
        reply_markup=reply_markup
    )
    context.user_data['setup_step'] = 'phone'
    bot_data['user_states'][user_id] = 'phone'
    asyncio.create_task(save_bot_state())

async def parse_settings(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞"""
    try:
        lines = [line.strip() for line in text.split('\n') if line.strip()]
        
        new_settings = {}
        
        for line in lines:
            line_lower = line.lower()
            
            if '–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤:' in line_lower:
                value = line.split(':')[1].strip()
                if value == '‚àû':
                    new_settings['max_channels'] = float('inf')
                else:
                    new_settings['max_channels'] = int(value)
            
            elif '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤:' in line_lower:
                value = line.split(':')[1].strip()
                if '-' in value:
                    min_val, max_val = map(int, value.split('-'))
                    new_settings['posts_range'] = (min_val, max_val)
                else:
                    posts_num = int(value)
                    new_settings['posts_range'] = (posts_num, posts_num)
            
            elif '–∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏:' in line_lower:
                value = line.split(':')[1].strip()
                if value == '_':
                    new_settings['delay_range'] = (0, 0)
                elif '-' in value:
                    clean_value = value.replace('—Å–µ–∫—É–Ω–¥', '').replace('—Å–µ–∫—É–Ω–¥–∞—Ö', '').strip()
                    parts = clean_value.split('-')
                    min_val, max_val = map(int, parts)
                    new_settings['delay_range'] = (min_val, max_val)
                else:
                    delay = int(value.replace('—Å–µ–∫—É–Ω–¥', '').replace('—Å–µ–∫—É–Ω–¥–∞—Ö', '').strip())
                    new_settings['delay_range'] = (delay, delay)
            
            elif '–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤:' in line_lower:
                value = line.split(':')[1].strip().lower()
                new_settings['track_new_posts'] = value in ['–¥–∞', 'yes', 'true', '1', '–≤–∫–ª—é—á–µ–Ω–æ']
        
        if new_settings:
            bot_data['settings'].update(new_settings)
            asyncio.create_task(save_bot_state())
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            await update.message.reply_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            await settings_menu_updated(update, context)
        else:
            await show_error_with_back_button(update, context,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n\n"
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: 150\n"
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤: 1-5\n"
                "–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏: 20-1000\n"
                "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤: –¥–∞"
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await show_error_with_back_button(update, context, "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")

async def settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not check_access(user_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω", show_alert=True)
        return
    
    bot_data['user_states'][user_id] = 'settings'
    asyncio.create_task(save_bot_state())
    
    settings = bot_data['settings']
    
    max_channels = "‚àû" if settings['max_channels'] == float('inf') else str(settings['max_channels'])
    posts_range = f"{settings['posts_range'][0]}-{settings['posts_range'][1]}" if settings['posts_range'][0] != settings['posts_range'][1] else str(settings['posts_range'][0])
    delay_range = "_" if settings['delay_range'] == (0, 0) else f"{settings['delay_range'][0]}-{settings['delay_range'][1]}"
    track_new_posts = "–¥–∞" if settings.get('track_new_posts', False) else "–Ω–µ—Ç"
    
    message_text = f"""‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞

üìä –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:

üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞: {max_channels}

üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ —Ä–µ–∞–∫—Ü–∏–π: {posts_range}

‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏: {delay_range} —Å–µ–∫—É–Ω–¥

üîÑ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤: {track_new_posts}

–î–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: —á–∏—Å–ª–æ –∏–ª–∏ ‚àû –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤: —á–∏—Å–ª–æ –º–∏–Ω–∏–º—É–º-–º–∞–∫—Å–∏–º—É–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ (–æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–¥ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤)

–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏: –º–∏–Ω–∏–º—É–º-–º–∞–∫—Å–∏–º—É–º —Å–µ–∫—É–Ω–¥ –∏–ª–∏ _ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ (–æ—Ç–∫–ª—é—á–∞—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)

–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤: –¥–∞/–Ω–µ—Ç

üîß –ü—Ä–∏–º–µ—Ä:

<code>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: 150
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤: 1-5
–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏: 20-1000
–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤: –¥–∞</code>"""
    
    keyboard = [[get_back_button()]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    edited_message = await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    context.user_data['settings_message_id'] = edited_message.message_id
    context.user_data['setup_step'] = 'settings'

async def settings_menu_updated(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    user_id = update.effective_user.id
    bot_data['user_states'][user_id] = 'settings'
    asyncio.create_task(save_bot_state())
    
    settings = bot_data['settings']
    
    max_channels = "‚àû" if settings['max_channels'] == float('inf') else str(settings['max_channels'])
    posts_range = f"{settings['posts_range'][0]}-{settings['posts_range'][1]}" if settings['posts_range'][0] != settings['posts_range'][1] else str(settings['posts_range'][0])
    delay_range = "_" if settings['delay_range'] == (0, 0) else f"{settings['delay_range'][0]}-{settings['delay_range'][1]}"
    track_new_posts = "–¥–∞" if settings.get('track_new_posts', False) else "–Ω–µ—Ç"
    
    message_text = f"""‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞

üìä –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:

üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞: {max_channels}

üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ —Ä–µ–∞–∫—Ü–∏–π: {posts_range}

‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏: {delay_range} —Å–µ–∫—É–Ω–¥

üîÑ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤: {track_new_posts}

–î–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: —á–∏—Å–ª–æ –∏–ª–∏ ‚àû –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤: —á–∏—Å–ª–æ –º–∏–Ω–∏–º—É–º-–º–∞–∫—Å–∏–º—É–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ (–æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–¥ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤)

–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏: –º–∏–Ω–∏–º—É–º-–º–∞–∫—Å–∏–º—É–º —Å–µ–∫—É–Ω–¥ –∏–ª–∏ _ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ (–æ—Ç–∫–ª—é—á–∞—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)

–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤: –¥–∞/–Ω–µ—Ç

üîß –ü—Ä–∏–º–µ—Ä:

<code>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: 150
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤: 1-5
–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏: 20-1000
–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤: –¥–∞</code>"""
    
    keyboard = [[get_back_button()]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if 'settings_message_id' in context.user_data:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=context.user_data['settings_message_id'],
                text=message_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        except Exception as e:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_message = await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
            context.user_data['settings_message_id'] = sent_message.message_id
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
        sent_message = await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
        context.user_data['settings_message_id'] = sent_message.message_id
    
    context.user_data['setup_step'] = 'settings'

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    if not check_access(user_id):
        await show_error_with_back_button(update, context, "‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
        return
    
    text = update.message.text
    step = context.user_data.get('setup_step')
    current_state = bot_data['user_states'].get(user_id, 'main_menu')
    
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: step={step}, state={current_state}, text={text[:50]}...")
    
    if current_state == 'prompts_menu' and (text.startswith("–ü—Ä–æ–º—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:") or text.startswith("–ü—Ä–æ–º—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:") or ("–ü—Ä–æ–º—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:" in text and "–ü—Ä–æ–º—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:" in text)):
        await handle_prompt_change(update, context, text)
        return
    
    if step == 'api_id':
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ API ID: {text}")
        if text.isdigit() and len(text) >= 6:  # API ID –æ–±—ã—á–Ω–æ 6-8 —Ü–∏—Ñ—Ä
            user_session = await db.load_user_session(user_id)
            logger.info(f"–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º API ID: {user_session}")
            
            if 'client_config' not in user_session:
                user_session['client_config'] = {}
            user_session['client_config']['api_id'] = text
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å–æ—Ö—Ä–∞–Ω—è–µ–º state –æ—Ç–¥–µ–ª—å–Ω–æ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤ bot_data
            user_session['state'] = 'api_hash'
            await db.save_user_session(user_id, user_session)
            logger.info(f"API ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {text}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
            saved_session = await db.load_user_session(user_id)
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API ID: {saved_session}")
            
            keyboard = [[get_back_button()]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚úÖ API ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ API Hash:",
                reply_markup=reply_markup
            )
            context.user_data['setup_step'] = 'api_hash'
            bot_data['user_states'][user_id] = 'api_hash'
            # –ù–ï –í–´–ó–´–í–ê–ï–ú save_bot_state() —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏
        else:
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π API ID: {text}")
            await show_error_with_back_button(update, context, "‚ùå API ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6-8 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    
    elif step == 'api_hash':
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ API Hash: {text[:10]}...")
        if len(text) >= 20:  # API Hash –æ–±—ã—á–Ω–æ –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
            user_session = await db.load_user_session(user_id)
            logger.info(f"–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º API Hash: {user_session}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ client_config —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç api_id
            if 'client_config' not in user_session:
                user_session['client_config'] = {}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ api_id –Ω–µ –ø–æ—Ç–µ—Ä—è–ª—Å—è
            if 'api_id' not in user_session['client_config']:
                logger.error("API ID –ø–æ—Ç–µ—Ä—è–ª—Å—è! –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.")
                await show_error_with_back_button(update, context, "‚ùå API ID –ø–æ—Ç–µ—Ä—è–ª—Å—è. –ù–∞—á–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–Ω–æ–≤–æ.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º API Hash –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É api_id
            user_session['client_config']['api_hash'] = text
            user_session['state'] = 'phone'
            await db.save_user_session(user_id, user_session)
            logger.info(f"API Hash —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
            saved_session = await db.load_user_session(user_id)
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API Hash: {saved_session}")
            
            keyboard = [[get_back_button()]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚úÖ API Hash —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79123456789):",
                reply_markup=reply_markup
            )
            context.user_data['setup_step'] = 'phone'
            bot_data['user_states'][user_id] = 'phone'
        else:
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π API Hash (–¥–ª–∏–Ω–∞ {len(text)})")
            await show_error_with_back_button(update, context, "‚ùå API Hash —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    
    elif step == 'phone':
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {text}")
        if re.match(r'^\+\d{10,15}$', text):
            user_session = await db.load_user_session(user_id)
            logger.info(f"–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_session}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ client_config —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç api_id –∏ api_hash
            if 'client_config' not in user_session:
                user_session['client_config'] = {}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ api_id –∏ api_hash –Ω–µ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å
            if 'api_id' not in user_session['client_config'] or 'api_hash' not in user_session['client_config']:
                logger.error(f"API –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å! –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {user_session.get('client_config', {})}")
                await show_error_with_back_button(update, context, "‚ùå API –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å. –ù–∞—á–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–Ω–æ–≤–æ.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º api_id –∏ api_hash
            user_session['client_config']['phone'] = text
            await db.save_user_session(user_id, user_session)
            logger.info(f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            final_session = await db.load_user_session(user_id)
            client_config = final_session.get('client_config', {})
            logger.info(f"–§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–æ–¥–∞: {client_config}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–æ–¥–∞
            if not client_config.get('api_id') or not client_config.get('api_hash'):
                logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞. Config: {client_config}")
                await show_error_with_back_button(update, context, "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –¥–∞–Ω–Ω—ã–µ. –ù–∞—á–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–Ω–æ–≤–æ.")
                return
                
            asyncio.create_task(send_telegram_code(update, context, text, client_config))
        else:
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {text}")
            await show_error_with_back_button(update, context, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (+79123456789)")
    
    elif step == 'password':
        asyncio.create_task(handle_telegram_password(update, context, text))
    
    elif step == 'settings':
        await parse_settings(update, context, text)
    
    elif step == 'manual_keywords':
        await handle_manual_keywords(update, context, text)

async def send_telegram_code(update: Update, context: ContextTypes.DEFAULT_TYPE, phone: str, config: dict):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ Telegram –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not config.get('api_id') or not config.get('api_hash'):
            await show_error_with_back_button(update, context, "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API ID –∏–ª–∏ API Hash. –ù–∞—á–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–Ω–æ–≤–æ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ api_id —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
        try:
            api_id = int(config['api_id'])
        except (ValueError, TypeError):
            await show_error_with_back_button(update, context, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API ID. –ù–∞—á–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–Ω–æ–≤–æ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç
        existing_client = await get_user_telethon_client(user_id)
        if existing_client:
            await existing_client.disconnect()
            session_data = await db.load_user_session(user_id)
            session_data['client_config'] = config
            session_data['has_active_client'] = True
            await db.save_user_session(user_id, session_data)
            await update_user_session_cache(user_id)
            
            await update.message.reply_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
            await show_main_menu(update, context, edit=False)
            return
        
        session_file = f'user_session_{user_id}'
        loop = asyncio.get_event_loop()
        
        client = TelegramClient(
            session_file,
            api_id,
            config['api_hash'],
            loop=loop,
            timeout=30,
            retry_delay=1,
            flood_sleep_threshold=60
        )
        
        await client.connect()
        
        if await client.is_user_authorized():
            await client.disconnect()
            session_data = await db.load_user_session(user_id)
            session_data['client_config'] = config
            session_data['has_active_client'] = True
            await db.save_user_session(user_id, session_data)
            await update_user_session_cache(user_id)
            
            await update.message.reply_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
            await show_main_menu(update, context, edit=False)
            return
        
        result = await client.send_code_request(phone)
        context.user_data['phone_code_hash'] = result.phone_code_hash
        context.user_data['client'] = client
        context.user_data['phone'] = phone
        context.user_data['config'] = config
        
        reply_markup = get_code_input_keyboard()
        
        await update.message.reply_text(
            "üì± –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –Ω–æ–º–µ—Ä.\n\n"
            "–í–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥: \n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
            reply_markup=reply_markup
        )
        
        context.user_data['setup_step'] = 'code'
        context.user_data['entered_code'] = ''
        bot_data['user_states'][user_id] = 'code'
        asyncio.create_task(save_bot_state())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        if 'client' in locals():
            try:
                await client.disconnect()
            except:
                pass
        await show_error_with_back_button(update, context, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {e}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API ID –∏ API Hash.")

async def resend_telegram_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    try:
        phone = context.user_data.get('phone')
        config = context.user_data.get('config')
        
        if not phone or not config:
            await update.callback_query.answer("‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        client = context.user_data.get('client')
        if not client:
            await update.callback_query.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏", show_alert=True)
            return
        
        await update.callback_query.answer("üìû –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ...")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç
            result = await client.send_code_request(phone)
            context.user_data['phone_code_hash'] = result.phone_code_hash
            context.user_data['entered_code'] = ''  # –û—á–∏—â–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥
            
            reply_markup = get_code_input_keyboard()
            
            short_message = ("üì± –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ!\n\n"
                           "–í–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥: \n\n"
                           "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ:")
           
            await update.callback_query.edit_message_text(
                short_message,
                reply_markup=reply_markup
            )
            
            logger.info(f"–ö–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä {phone} –∏—Å–ø–æ–ª—å–∑—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç")
            
        except Exception as send_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {send_error}")
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await update.callback_query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_code_input_keyboard()
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {e}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –¥–ª–∏–Ω–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
        if "Message_too_long" in str(e):
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await update.callback_query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏",
                    reply_markup=get_code_input_keyboard()
                )
            except:
                await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏", show_alert=True)
        else:
            await update.callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}", show_alert=True)

async def handle_telegram_password(update: Update, context: ContextTypes.DEFAULT_TYPE, password: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è Telegram –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    try:
        client = context.user_data.get('client')
        if not client:
            await show_error_with_back_button(update, context, "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–Ω–æ–≤–æ.")
            return
        
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        await client.sign_in(password=password)
        
        config = context.user_data.get('config', {})
        config['password'] = password
        
        logger.info(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {config}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session_data = {
            'client_config': config,
            'has_active_client': True,
            'state': 'main_menu'
        }
        
        await db.save_user_session(user_id, session_data)
        logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –ü–û–°–õ–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        user_sessions_cache[user_id] = session_data
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
        saved_session = await db.load_user_session(user_id)
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {saved_session}")
        
        await client.disconnect()
        
        await update.message.reply_text("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç!")
        context.user_data.clear()
        await show_main_menu(update, context, edit=False)
        
    except PasswordHashInvalidError:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await show_error_with_back_button(update, context, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —Å –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await show_error_with_back_button(update, context, f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}")
        
        if 'client' in context.user_data:
            try:
                await context.user_data['client'].disconnect()
            except:
                pass
            context.user_data.clear()

async def handle_manual_keywords(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    user_id = update.effective_user.id
    user_data = bot_data['pending_manual_setup'].get(user_id, {})
    keywords = [kw.strip() for kw in text.split(',') if kw.strip()]
    user_data['keywords'] = keywords
    bot_data['pending_manual_setup'][user_id] = user_data
    
    if user_data.get('topics'):
        bot_data['settings']['keywords'] = keywords
        bot_data['settings']['topics'] = user_data['topics']
        bot_data['settings']['target_channel'] = ''
        asyncio.create_task(save_bot_state())
        
        await update.message.reply_text(
            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
            f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords)}\n"
            f"–¢–µ–º—ã: {', '.join(user_data['topics'])}"
        )
        
        del bot_data['pending_manual_setup'][user_id]
        context.user_data.clear()
        
        await show_main_menu(update, context, edit=False)
    else:
        await update.message.reply_text(
            "‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ ‚úÖ'"
        )

async def handle_code_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not context.user_data.get('setup_step') == 'code':
        return
    
    data = query.data
    
    if data.startswith('code_'):
        action = data.split('_')[1]
        
        if action == 'delete':
            if context.user_data['entered_code']:
                context.user_data['entered_code'] = context.user_data['entered_code'][:-1]
        
        elif action == 'send':
            code = context.user_data['entered_code']
            if len(code) >= 5:
                # –î–æ–ª–≥–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –≤—ã–Ω–æ—Å–∏–º –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É
                asyncio.create_task(process_telegram_code(update, context, code))
                return
            else:
                await query.answer("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Ü–∏—Ñ—Ä", show_alert=True)
                return
        
        elif action == 'resend':
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–∞
            await resend_telegram_code(update, context)
            return
        
        elif action == 'cancel':
            if 'client' in context.user_data:
                try:
                    await context.user_data['client'].disconnect()
                except:
                    pass
            context.user_data.clear()
            await query.edit_message_text("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            await show_main_menu(update, context, edit=False)
            return
        
        elif action.isdigit():
            if len(context.user_data['entered_code']) < 10:
                context.user_data['entered_code'] += action
       
        entered_code = context.user_data['entered_code']
        await query.edit_message_text(
            f"üì± –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –Ω–æ–º–µ—Ä.\n\n"
            f"–í–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥: {entered_code}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
            reply_markup=get_code_input_keyboard()
        )

async def process_telegram_code(update: Update, context: ContextTypes.DEFAULT_TYPE, code: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    try:
        client = context.user_data['client']
        phone_code_hash = context.user_data['phone_code_hash']
        config = context.user_data.get('config', {})
        
        logger.info(f"üîç DEBUG: –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –∫–æ–¥–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        logger.info(f"üîç DEBUG: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {config}")
        
        await client.sign_in(
            phone=config['phone'],
            code=code,
            phone_code_hash=phone_code_hash
        )
        
        logger.info(f"‚úÖ DEBUG: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –∫–æ–¥—É —É—Å–ø–µ—à–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        session_data = {
            'client_config': config,
            'has_active_client': True,
            'state': 'main_menu'
        }
        
        logger.info(f"üîç DEBUG: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {session_data}")
        await db.save_user_session(user_id, session_data)
        logger.info(f"‚úÖ DEBUG: –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –ü–û–°–õ–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        user_sessions_cache[user_id] = session_data.copy()
        logger.info(f"üîç DEBUG: –ö–µ—à –æ–±–Ω–æ–≤–ª–µ–Ω: {user_sessions_cache[user_id]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
        saved_session = await db.load_user_session(user_id)
        logger.info(f"üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å –≤ –ë–î: {saved_session}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
        import os
        session_file = f'user_session_{user_id}.session'
        session_file_exists = os.path.exists(session_file)
        logger.info(f"üîç DEBUG: –§–∞–π–ª —Å–µ—Å—Å–∏–∏ {session_file} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {session_file_exists}")
        
        await client.disconnect()
        
        await update.callback_query.edit_message_text("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç!")
        context.user_data.clear()
        
        await show_main_menu(update, context, edit=False)
        return
        
    except SessionPasswordNeededError:
        logger.info(f"üîç DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
        keyboard = [[get_back_button()]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:",
            reply_markup=reply_markup
        )
        context.user_data['setup_step'] = 'password'
        bot_data['user_states'][user_id] = 'password'
        return
        
    except PhoneCodeInvalidError:
        logger.warning(f"‚ö†Ô∏è DEBUG: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await update.callback_query.edit_message_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n"
            f"–í–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥: {context.user_data['entered_code']}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
            reply_markup=get_code_input_keyboard()
        )
        context.user_data['entered_code'] = ''
        return
        
    except Exception as e:
        logger.error(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —Å –∫–æ–¥–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        import traceback
        logger.error(f"‚ùå DEBUG: –ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
        keyboard = [[get_back_button()]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}", reply_markup=reply_markup)

async def target_channel_setup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not check_access(user_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω", show_alert=True)
        return
    
    bot_data['user_states'][user_id] = 'target_channel'
    asyncio.create_task(save_bot_state())
    
    settings = bot_data['settings']
    
    current_channel = settings.get('target_channel', '–ù–µ –≤—ã–±—Ä–∞–Ω')
    topics_text = ', '.join([f'"{topic}"' for topic in settings['topics']])
    keywords_text = ', '.join(settings['keywords'])
    
    message_text = f"""üì∫ –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞

–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª –∏ –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ —Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ –ø–æ—Ö–æ–∂–∏–º –∫–∞–Ω–∞–ª–∞–º. –ü–æ—Ö–æ–∂–∏–µ –∫–∞–Ω–∞–ª—ã –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ —Ç–µ–º–∞—Ç–∏–∫–µ.

{'–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª: ' + current_channel if current_channel != '–ù–µ –≤—ã–±—Ä–∞–Ω' else ''}

–¢–µ–º–∞—Ç–∏–∫–∞: {topics_text}

–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: {keywords_text}"""
    
    keyboard = [
        [InlineKeyboardButton("üì∫ –í—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª", callback_data="select_channel")],
        [InlineKeyboardButton("‚úèÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="manual_setup")],
        [get_back_button()]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(message_text, reply_markup=reply_markup)

async def select_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –≤—ã–±–æ—Ä—É –∫–∞–Ω–∞–ª–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot_data['user_states'][user_id] = 'channel_selection'
    context.user_data['awaiting_channel'] = True
    
    keyboard = [
        [KeyboardButton(
            "üì∫ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–∞–Ω–∞–ª–æ–º",
            request_chat={
                'request_id': 1,
                'chat_is_channel': True
            }
        )],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="target_channel")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    reply_markup = ReplyKeyboardMarkup([[keyboard[0][0]]], one_time_keyboard=True, resize_keyboard=True)
    inline_markup = InlineKeyboardMarkup([[keyboard[1][0], keyboard[2][0]]])
    
    await query.edit_message_text(
        "üì∫ –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n"
        "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª –±—É–¥–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é GPT-4.",
        reply_markup=inline_markup
    )
    
    channel_selection_msg = await context.bot.send_message(
        chat_id=user_id,
        text="üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞:",
        reply_markup=reply_markup
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    context.user_data['channel_selection_message_id'] = channel_selection_msg.message_id

async def manual_setup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not check_access(user_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω", show_alert=True)
        return
    
    bot_data['user_states'][user_id] = 'manual_setup'
    asyncio.create_task(save_bot_state())
    
    bot_data['pending_manual_setup'][user_id] = {'topics': [], 'keywords': []}
    
    keyboard = []
    for i in range(0, len(AVAILABLE_TOPICS), 4):
        row = []
        for j in range(4):
            if i + j < len(AVAILABLE_TOPICS):
                topic = AVAILABLE_TOPICS[i + j]
                row.append(InlineKeyboardButton(topic, callback_data=f"topic_{i+j}"))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="topics_done")])
    keyboard.append([get_back_button()])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "‚úèÔ∏è –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ. –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ ‚úÖ' –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.\n\n"
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
        reply_markup=reply_markup
    )
    
    context.user_data['setup_step'] = 'manual_keywords'
    bot_data['user_states'][user_id] = 'topic_selection'
    asyncio.create_task(save_bot_state())

async def handle_topic_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data.startswith('topic_'):
        topic_index = int(data.split('_')[1])
        topic = AVAILABLE_TOPICS[topic_index]
        
        user_data = bot_data['pending_manual_setup'].get(user_id, {'topics': [], 'keywords': []})
        
        if topic in user_data['topics']:
            user_data['topics'].remove(topic)
        else:
            user_data['topics'].append(topic)
        
        bot_data['pending_manual_setup'][user_id] = user_data
        
        keyboard = []
        for i in range(0, len(AVAILABLE_TOPICS), 4):
            row = []
            for j in range(4):
                if i + j < len(AVAILABLE_TOPICS):
                    topic_name = AVAILABLE_TOPICS[i + j]
                    if topic_name in user_data['topics']:
                        display_name = f"‚úÖ {topic_name}"
                    else:
                        display_name = topic_name
                    row.append(InlineKeyboardButton(display_name, callback_data=f"topic_{i+j}"))
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="topics_done")])
        keyboard.append([get_back_button()])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_reply_markup(reply_markup=reply_markup)
    
    elif data == 'topics_done':
        user_data = bot_data['pending_manual_setup'].get(user_id, {'topics': [], 'keywords': []})
        
        if not user_data['topics']:
            await query.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–µ–º—É", show_alert=True)
            return
        
        if user_data.get('keywords'):
            bot_data['settings']['keywords'] = user_data['keywords']
            bot_data['settings']['topics'] = user_data['topics']
            bot_data['settings']['target_channel'] = ''
            asyncio.create_task(save_bot_state())
            
            keyboard = [[get_back_button()]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
                f"üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(user_data['keywords'])}\n\n"
                f"üè∑Ô∏è –¢–µ–º—ã: {', '.join(user_data['topics'])}",
                reply_markup=reply_markup
            )
            
            del bot_data['pending_manual_setup'][user_id]
            context.user_data.clear()
        else:
            keyboard = [[get_back_button()]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"‚úÖ –¢–µ–º—ã –≤—ã–±—Ä–∞–Ω—ã: {', '.join(user_data['topics'])}\n\n"
                "üìù –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
                reply_markup=reply_markup
            )

async def toggle_run(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not check_access(user_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω", show_alert=True)
        return
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
    if user_id in user_sessions_cache:
        user_session = user_sessions_cache[user_id].copy()
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_session}")
    else:
        user_session = await db.load_user_session(user_id)
        user_sessions_cache[user_id] = user_session
        logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_session}")
    
    is_running = user_session.get('is_running', False)
    has_active_client = user_session.get('has_active_client', False)
    client_config = user_session.get('client_config', {})
    
    logger.info(f"Toggle run –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: is_running={is_running}, has_active_client={has_active_client}")
    logger.info(f"Client config –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {bool(client_config)}")
        
    if is_running:
        user_session['is_running'] = False
        await db.save_user_session(user_id, user_session)
        await update_user_session_cache(user_id)
        
        keyboard = [[get_back_button()]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text("‚èπÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", reply_markup=reply_markup)
        
        try:
            await stop_user_services(user_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    else:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±–ª–æ–∫–∏—Ä—É—é—Ç –∑–∞–ø—É—Å–∫
        if not has_active_client or not client_config:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            keyboard = [[get_back_button()]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç", reply_markup=reply_markup)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        required_fields = ['api_id', 'api_hash', 'phone']
        missing_fields = [field for field in required_fields if not client_config.get(field)]
        
        if missing_fields:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –Ω–µ–ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
            keyboard = [[get_back_button()]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ–ø–æ–ª–Ω–∞—è. –î–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∑–∞–Ω–æ–≤–æ", reply_markup=reply_markup)
            return
        
        user_session['is_running'] = True
        await db.save_user_session(user_id, user_session)
        await update_user_session_cache(user_id)
        
        keyboard = [[get_back_button()]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text("‚ñ∂Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞", reply_markup=reply_markup)
        
        try:
            await start_user_services(user_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def get_user_telethon_client(user_id: int) -> Optional[TelegramClient]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ Telethon –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î, –∞ –Ω–µ –∏–∑ –∫–µ—à–∞
        session_data = await db.load_user_session(user_id)
        client_config = session_data.get('client_config')
        
        if not client_config:
            logger.debug(f"–ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return None
            
        if not all(key in client_config for key in ['api_id', 'api_hash', 'phone']):
            logger.debug(f"–ù–µ–ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ api_id —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
        try:
            api_id = int(client_config['api_id'])
        except (ValueError, TypeError):
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return None
            
        session_file = f'user_session_{user_id}'
        loop = asyncio.get_event_loop()
        
        client = TelegramClient(
            session_file,
            api_id,
            client_config['api_hash'],
            loop=loop,
            timeout=30,
            retry_delay=1,
            flood_sleep_threshold=60
        )
        
        await client.connect()
        
        if await client.is_user_authorized():
            logger.info(f"–ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ–∑–¥–∞–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return client
        else:
            await client.disconnect()
            logger.debug(f"–ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None

async def start_user_services(user_id: int):
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        user_session = await db.load_user_session(user_id)
        client_config = user_session.get('client_config', {})
        
        if not client_config or not all(client_config.get(field) for field in ['api_id', 'api_hash', 'phone']):
            logger.error(f"–ù–µ–ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        client = await get_user_telethon_client(user_id)
        if not client:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ
        user_settings = user_session.get('settings', bot_data['settings'])
        
        try:
            import channel_search_engine
            await channel_search_engine.start_search(user_settings, client, user_id)
            logger.info(f"–ü–æ–∏—Å–∫–æ–≤–∏–∫ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        try:
            import masslooker
            asyncio.create_task(masslooker.start_masslooking(client, user_settings, user_id))
            logger.info(f"–ú–∞—Å—Å–ª—É–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞—Å—Å–ª—É–∫–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        # –ù–ï –æ—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∑–¥–µ—Å—å, –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        user_id = update.effective_user.id
        if not check_access(user_id):
            return

        stats = bot_data['statistics']
        stats_text = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            f"üí¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {stats['comments_sent']}\n\n"
            f"üì∫ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {stats['channels_processed']}\n\n"
            f"üëç –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Ä–µ–∞–∫—Ü–∏–π: {stats['reactions_set']}"
        )

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_statistics")],
            [get_back_button()]
        ])

        if update.callback_query:
            # –ï—Å–ª–∏ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ callback, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await update.callback_query.edit_message_text(
                stats_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=stats_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        bot_data['active_messages']['statistics'][user_id] = {
            'message_id': message.message_id,
            'chat_id': update.effective_chat.id
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await show_error_with_back_button(update, context, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

def update_statistics(comments=0, channels=0, reactions=0):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if comments:
            bot_data['statistics']['comments_sent'] += comments
        if channels:
            bot_data['statistics']['channels_processed'] += channels
        if reactions:
            bot_data['statistics']['reactions_set'] += reactions

        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        asyncio.create_task(update_statistics_message())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def update_statistics_message(user_id: int = None):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        stats = bot_data['statistics']
        stats_text = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            f"üí¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {stats['comments_sent']}\n\n"
            f"üì∫ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {stats['channels_processed']}\n\n"
            f"üëç –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Ä–µ–∞–∫—Ü–∏–π: {stats['reactions_set']}"
        )

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_statistics")],
            [get_back_button()]
        ])

        if user_id:
            users_to_update = [user_id]
        else:
            users_to_update = list(bot_data['active_messages']['statistics'].keys())

        for uid in users_to_update:
            message_data = bot_data['active_messages']['statistics'].get(uid)
            if not message_data:
                continue

            try:
                app = Application.get_running_application()
                if not app or not app.bot:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞")
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
                try:
                    await app.bot.get_chat(message_data['chat_id'])
                except Exception as e:
                    logger.warning(f"–ß–∞—Ç {message_data['chat_id']} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                    bot_data['active_messages']['statistics'].pop(uid, None)
                    continue

                await app.bot.edit_message_text(
                    text=stats_text,
                    chat_id=message_data['chat_id'],
                    message_id=message_data['message_id'],
                    reply_markup=keyboard,
                    parse_mode=ParseMode.HTML
                )
                logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}")

            except Exception as e:
                error_str = str(e).lower()
                if "message is not modified" in error_str:
                    
                    continue
                elif "message to edit not found" in error_str or "chat not found" in error_str:
                    # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                    logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    bot_data['active_messages']['statistics'].pop(uid, None)
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {e}")

    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def update_settings_message(user_id: int = None):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        settings = bot_data['settings']
        settings_text = (
            "‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
            f"üéØ –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: {settings['target_channel']}\n\n"
            f"üìä –ú–∞–∫—Å–∏–º—É–º –∫–∞–Ω–∞–ª–æ–≤: {settings['max_channels']}\n\n"
            f"üìù –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Å—Ç–æ–≤: {settings['posts_range']}\n\n"
            f"‚è± –ó–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫): {settings['delay_range']}\n\n"
            f"üîÑ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤: {'–í–∫–ª—é—á–µ–Ω–æ' if settings['track_new_posts'] else '–í—ã–∫–ª—é—á–µ–Ω–æ'}\n\n"
            f"üìå –¢–µ–º—ã –ø–æ–∏—Å–∫–∞: {', '.join(settings['topics'])}\n\n"
            f"üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(settings['keywords'])}"
        )

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_edit")],
            [get_back_button()]
        ])

        if user_id:
            users_to_update = [user_id]
        else:
            users_to_update = list(bot_data['active_messages']['settings'].keys())

        for uid in users_to_update:
            message_data = bot_data['active_messages']['settings'].get(uid)
            if not message_data:
                continue

            try:
                app = Application.get_running_application()
                if not app or not app.bot:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞")
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
                try:
                    await app.bot.get_chat(message_data['chat_id'])
                except Exception as e:
                    logger.warning(f"–ß–∞—Ç {message_data['chat_id']} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                    bot_data['active_messages']['settings'].pop(uid, None)
                    continue

                await app.bot.edit_message_text(
                    text=settings_text,
                    chat_id=message_data['chat_id'],
                    message_id=message_data['message_id'],
                    reply_markup=keyboard,
                    parse_mode=ParseMode.HTML
                )
                logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}")

            except Exception as e:
                error_str = str(e).lower()
                if "message is not modified" in error_str:
                    continue
                elif "message to edit not found" in error_str or "chat not found" in error_str:
                    # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                    logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    bot_data['active_messages']['settings'].pop(uid, None)
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {e}")

    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

async def show_detailed_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–∞–π–ª–æ–≤ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(generate_and_send_statistics_files(user_id, context))

async def generate_and_send_statistics_files(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–æ–Ω–µ"""
    try:
        await generate_detailed_statistics_files()
        
        files_to_send = [
            'processed_channels.txt',
            'queue_channels.txt', 
            'found_channels.txt'
        ]
        
        for file_name in files_to_send:
            if os.path.exists(file_name):
                try:
                    with open(file_name, 'rb') as file:
                        await context.bot.send_document(
                            chat_id=user_id,
                            document=file,
                            filename=file_name,
                            caption=f"üìä –§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {file_name}"
                        )
                    
                    try:
                        os.remove(file_name)
                    except Exception as remove_error:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_name}: {remove_error}")
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {file_name}: {e}")
                    keyboard = [[get_back_button()]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {file_name}: {e}",
                        reply_markup=reply_markup
                    )
                    
                    try:
                        if os.path.exists(file_name):
                            os.remove(file_name)
                    except Exception as remove_error:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_name} –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: {remove_error}")
        
        keyboard = [[get_back_button()]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=user_id,
            text="‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã",
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        keyboard = [[get_back_button()]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}",
            reply_markup=reply_markup
        )


async def generate_detailed_statistics_files():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        processed_content = "üìä –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ï –ö–ê–ù–ê–õ–´\n"
        processed_content += "=" * 50 + "\n\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            from database import db
            channel_stats = await db.get_detailed_channel_statistics()
            
            processed_count = 0
            
            if not channel_stats:
                processed_content += "–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.\n"
            else:
                for channel_username, data in channel_stats.items():
                    comments_count = data.get('comments', 0)
                    reactions_count = data.get('reactions', 0)
                    
                    if comments_count > 0 or reactions_count > 0:
                        processed_count += 1
                        processed_content += f"**–ö–∞–Ω–∞–ª: {channel_username}**\n\n"
                        processed_content += f"üí¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {comments_count}\n"
                        processed_content += f"üëçüèª –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Ä–µ–∞–∫—Ü–∏–π: {reactions_count}\n\n"
                        
                        comment_links = data.get('comment_links', [])
                        if comment_links:
                            processed_content += "üîóüí¨ –°—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:\n"
                            for link in comment_links:
                                processed_content += f"{link}\n"
                            processed_content += "\n"
                        
                        post_links = data.get('post_links', [])
                        if post_links:
                            processed_content += "üîóüì∫ –°—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç—ã –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º–∏ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\n"
                            for link in post_links:
                                processed_content += f"{link}\n"
                            processed_content += "\n"
                        
                        processed_content += "-" * 50 + "\n\n"
                
                if processed_count == 0:
                    processed_content += "–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.\n"
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –Ω–∞—á–∞–ª–æ
                    summary = f"üìä –ò–¢–û–ì–û –û–ë–†–ê–ë–û–¢–ê–ù–û: {processed_count} –∫–∞–Ω–∞–ª–æ–≤\n\n" + "=" * 50 + "\n\n"
                    processed_content = processed_content.replace("=" * 50 + "\n\n", summary)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î: {e}")
            processed_content += "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.\n"
        
        with open('processed_channels.txt', 'w', encoding='utf-8-sig', newline='\n') as f:
            f.write(processed_content)
        
        # 2. –§–∞–π–ª —Å –æ—á–µ—Ä–µ–¥—å—é
        queue_content = "üìã –û–ß–ï–†–ï–î–¨ –ö–ê–ù–ê–õ–û–í\n"
        queue_content += "=" * 50 + "\n\n"
        
        queue_channels = bot_data['detailed_statistics']['queue_channels']
        if not queue_channels:
            queue_content += "–û—á–µ—Ä–µ–¥—å –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç–∞.\n"
        else:
            queue_content += f"–ö–∞–Ω–∞–ª–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É: {len(queue_channels)}\n\n"
            for i, channel in enumerate(queue_channels, 1):
                queue_content += f"{i}. {channel}\n"
        
        with open('queue_channels.txt', 'w', encoding='utf-8-sig', newline='\n') as f:
            f.write(queue_content)
       
        found_content = "üîç –ù–ê–ô–î–ï–ù–ù–´–ï –ö–ê–ù–ê–õ–´\n"
        found_content += "=" * 50 + "\n\n"
        
        found_channels = bot_data['detailed_statistics']['found_channels']
        if not found_channels:
            found_content += "–ù–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.\n"
        else:
            found_content += f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–∏—Å–∫–æ–≤–∏–∫–æ–º –∫–∞–Ω–∞–ª–æ–≤: {len(found_channels)}\n\n"
            for i, channel in enumerate(found_channels, 1):
                found_content += f"{i}. {channel}\n"
        
        with open('found_channels.txt', 'w', encoding='utf-8-sig', newline='\n') as f:
            f.write(found_content)
        
        logger.info("–§–∞–π–ª—ã –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π UTF-8")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def update_queue_statistics(queue_list):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏"""
    bot_data['detailed_statistics']['queue_channels'] = queue_list
    asyncio.create_task(save_bot_state())

def update_found_channels_statistics(found_channels_list):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    bot_data['detailed_statistics']['found_channels'] = found_channels_list
    asyncio.create_task(save_bot_state())

async def handle_channel_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
    if update.message and hasattr(update.message, 'chat_shared'):
        chat_shared = update.message.chat_shared
        if chat_shared.request_id == 1:
            chat_id = chat_shared.chat_id
            
            from telegram import ReplyKeyboardRemove
            await update.message.reply_text("üì∫ –ö–∞–Ω–∞–ª –ø–æ–ª—É—á–µ–Ω, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...", reply_markup=ReplyKeyboardRemove())
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
            context.user_data.pop('awaiting_channel', None)
            
            # –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ–Ω–µ
            asyncio.create_task(analyze_selected_channel(update, context, chat_id))

async def analyze_selected_channel(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    """–ê–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ–Ω–µ"""
    user_id = update.effective_user.id
    
    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–π
        client = await get_user_telethon_client(user_id)
        if not client:
            keyboard = [[get_back_button()]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç", reply_markup=reply_markup)
            return
            
        try:
            entity = await client.get_entity(chat_id)
            channel_username = entity.username if hasattr(entity, 'username') and entity.username else None
            
            if channel_username:
                channel_link = f"https://t.me/{channel_username}"
                
                try:
                    import channel_search_engine
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    channel_search_engine.shared_telethon_client = client
                    topics, keywords = await channel_search_engine.analyze_channel(chat_id)
                    
                    bot_data['settings']['target_channel'] = channel_link
                    bot_data['settings']['topics'] = topics
                    bot_data['settings']['keywords'] = keywords
                    asyncio.create_task(save_bot_state())
                    
                    await update.message.reply_text(
                        f"‚úÖ –ö–∞–Ω–∞–ª –≤—ã–±—Ä–∞–Ω –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!\n\n"
                        f"üì∫ –ö–∞–Ω–∞–ª: {channel_link}\n\n"
                        f"üè∑Ô∏è –¢–µ–º—ã: {', '.join(topics)}\n\n"
                        f"üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords)}"
                    )
                    
                    await show_main_menu(update, context, edit=False)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞: {e}")
                    keyboard = [[get_back_button()]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞: {e}", reply_markup=reply_markup)
                finally:
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    await client.disconnect()
            else:
                await client.disconnect()
                keyboard = [[get_back_button()]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text("‚ùå –ö–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º (–∏–º–µ—Ç—å username)", reply_markup=reply_markup)
        except Exception as e:
            await client.disconnect()
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}")
            keyboard = [[get_back_button()]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}", reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}")
        keyboard = [[get_back_button()]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}", reply_markup=reply_markup)

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    data = query.data
    
    try:
        if data == "back":
            await handle_back_button(update, context)
        elif data == "account_setup":
            await account_setup(update, context)
        elif data == "target_channel":
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥" –∏–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞
            channel_message_id = context.user_data.get('channel_selection_message_id')
            awaiting_channel = context.user_data.get('awaiting_channel')
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞:" –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if channel_message_id:
                try:
                    await context.bot.delete_message(
                        chat_id=update.effective_user.id,
                        message_id=channel_message_id
                    )
                    logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ")
                except Exception as e:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞: {e}")
            
            # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É "–ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–∞–Ω–∞–ª–æ–º" –µ—Å–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ
            if awaiting_channel:
                try:
                    from telegram import ReplyKeyboardRemove
                    await context.bot.send_message(
                        chat_id=update.effective_user.id,
                        text="",
                        reply_markup=ReplyKeyboardRemove()
                    )
                except:
                    pass
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.clear()
            await target_channel_setup(update, context)
        elif data == "main_menu":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            channel_message_id = context.user_data.get('channel_selection_message_id')
            awaiting_channel = context.user_data.get('awaiting_channel')
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞:" –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if channel_message_id:
                try:
                    await context.bot.delete_message(
                        chat_id=update.effective_user.id,
                        message_id=channel_message_id
                    )
                    logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                except Exception as e:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞: {e}")
            
            # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É "–ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–∞–Ω–∞–ª–æ–º" –µ—Å–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ
            if awaiting_channel:
                try:
                    from telegram import ReplyKeyboardRemove
                    await context.bot.send_message(
                        chat_id=update.effective_user.id,
                        text="",
                        reply_markup=ReplyKeyboardRemove()
                    )
                except:
                    pass
            
            context.user_data.clear()
            await show_main_menu(update, context)
        elif data == "select_channel":
            await select_channel(update, context)
        elif data == "manual_setup":
            await manual_setup(update, context)
        elif data.startswith("topic_") or data == "topics_done":
            await handle_topic_selection(update, context)
        elif data == "settings":
            await settings_menu(update, context)
        elif data == "prompts":
            await show_prompts_menu(update, context)
        elif data == "reset_prompts":
            await reset_prompts(update, context)
        elif data == "toggle_run":
            await toggle_run(update, context)
        elif data == "statistics":
            await show_statistics(update, context)
        elif data == "detailed_statistics":
            await show_detailed_statistics(update, context)
        elif data.startswith("code_"):
            await handle_code_input(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –∑–∞–ø—Ä–æ—Å–∞ {data}: {e}")
        try:
            keyboard = [[get_back_button()]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=reply_markup)
        except:
            pass

def add_processed_channel_statistics(channel_username, comment_link=None, post_link=None, reaction_added=False, found_topic=None):
    """—Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞–Ω–∞–ª—É"""
    try:
        if comment_link or reaction_added:
            if channel_username not in bot_data['detailed_statistics']['processed_channels']:
                bot_data['detailed_statistics']['processed_channels'][channel_username] = {
                    'processed_at': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'comments': 0,
                    'reactions': 0,
                    'comment_links': [],
                    'post_links': [],
                    'found_topic': found_topic or '–î—Ä—É–≥–æ–µ',
                    'found_for_target': bot_data['settings'].get('target_channel', ''),
                    'found_for_keywords': bot_data['settings'].get('keywords', []),
                    'found_for_topics': bot_data['settings'].get('topics', [])
                }
            
            channel_stats = bot_data['detailed_statistics']['processed_channels'][channel_username]
            
            if comment_link and post_link:
                channel_stats['comments'] += 1
                channel_stats['comment_links'].append(comment_link)
                if post_link not in channel_stats['post_links']:
                    channel_stats['post_links'].append(post_link)
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username}, –≤—Å–µ–≥–æ: {channel_stats['comments']}")
            
            if reaction_added:
                channel_stats['reactions'] += 1
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username}, –≤—Å–µ–≥–æ: {channel_stats['reactions']}")
                
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            try:
                from database import db
                if comment_link and post_link:
                    asyncio.create_task(db.add_channel_comment(channel_username, comment_link, post_link))
                if reaction_added:
                    asyncio.create_task(db.add_channel_reaction(channel_username))
            except Exception as db_error:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {db_error}")
        else:
            if found_topic and channel_username not in bot_data['detailed_statistics']['processed_channels']:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∏—Å–∫–∞
                if channel_username not in bot_data['detailed_statistics']['found_channels']:
                    bot_data['detailed_statistics']['found_channels'].append(channel_username)
                    logger.info(f"–ö–∞–Ω–∞–ª {channel_username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_username}: {e}")

async def ensure_telethon_client_initialized(user_id: int):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        session_data = await db.load_user_session(user_id)
        config = session_data.get('client_config', {})
        
        if not config.get('api_id') or not config.get('api_hash') or not config.get('phone'):
            return False
            
        client = await get_user_telethon_client(user_id)
        if client:
            await client.disconnect()
            return True
            
        return False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

def get_shared_telethon_client():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –µ–¥–∏–Ω–æ–≥–æ Telethon –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    return bot_data.get('telethon_client')

async def fast_initialization():
    """–ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
    try:
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...")
        
        init_task = asyncio.create_task(init_database())
        
        config = load_user_config()
        
        await init_task
        
        await load_bot_state()
        
        # –£–±–∏—Ä–∞–µ–º –≤—ã–∑–æ–≤ ensure_telethon_client_initialized –±–µ–∑ user_id
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        bot_data['initialization_complete'] = True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        bot_data['initialization_complete'] = True

async def start_new_post_tracking():
    """–ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    try:
        import masslooker
        await masslooker.start_new_post_tracking()
        logger.info("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤: {e}")

async def stop_new_post_tracking():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    try:
        import masslooker
        await masslooker.stop_new_post_tracking()
        logger.info("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤: {e}")

async def run_bot(bot_token):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(bot_token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(handle_callback_query))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
        application.add_handler(MessageHandler(filters.StatusUpdate.CHAT_SHARED, handle_channel_selection))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
        init_task = asyncio.create_task(fast_initialization())
        
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ)")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        async with application:
            await application.start()
            await application.updater.start_polling(
                poll_interval=1.0,
                bootstrap_retries=-1,  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                read_timeout=30,       #  —Ç–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è
                write_timeout=30,      #  —Ç–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Å–∏
                connect_timeout=30,    #  —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                pool_timeout=30        #  —Ç–∞–π–º–∞—É—Ç –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            )
            
            try:
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                await init_task
                
                logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                
                # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–æ–≤
                while True:
                    await asyncio.sleep(1)
                    
            except asyncio.CancelledError:
                logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–æ—Ç–∞")
            except KeyboardInterrupt:
                logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            finally:
                logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
                
                # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
                if bot_data['new_post_tracker'] is not None:
                    await stop_new_post_tracking()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                try:
                    await save_bot_state()
                    await close_database()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º Telethon –∫–ª–∏–µ–Ω—Ç
                try:
                    if bot_data['telethon_client']:
                        await bot_data['telethon_client'].disconnect()
                        logger.info("Telethon –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è Telethon –∫–ª–∏–µ–Ω—Ç–∞: {e}")
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º thread pool
                try:
                                        executor.shutdown(wait=False)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è thread pool: {e}")
                
                await application.updater.stop()
                await application.stop()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ run_bot: {e}")
        raise

def setup_signal_handlers():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    def signal_handler(signum, frame):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        import sys
        sys.exit(0)
    
    try:
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

def main(bot_token):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º"""
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        setup_signal_handlers()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        asyncio.run(run_bot(bot_token))
        
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}")
        raise
    finally:
        logger.info("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –¥—Ä—É–≥–∏–º–∏ –º–æ–¥—É–ª—è–º–∏
def get_bot_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π"""
    return bot_data

def is_bot_running():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç"""
    return bot_data.get('is_running', False)

def get_telethon_client():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ Telethon –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    return bot_data.get('telethon_client')

def get_bot_settings():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞"""
    return bot_data.get('settings', {})

def get_bot_prompts():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º—Ç–æ–≤ –±–æ—Ç–∞"""
    return bot_data.get('prompts', {})

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –º–æ–¥—É–ª—è–º–∏
async def notify_bot_status(message: str, user_id: int = None):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ –±–æ—Ç–∞"""
    try:
        if user_id and user_id in bot_data['active_users']:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message}")
        else:
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            logger.info(f"–û–±—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {message}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

def register_external_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–Ω–µ—à–Ω–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
        pass
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–Ω–µ—à–Ω–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")

# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
class BotContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.bot_task = None
    
    async def __aenter__(self):
        """–í—Ö–æ–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä")
        self.bot_task = asyncio.create_task(run_bot(self.bot_token))
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        await asyncio.sleep(2)
        
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–í—ã—Ö–æ–¥ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä")
        
        if self.bot_task:
            self.bot_task.cancel()
            try:
                await self.bot_task
            except asyncio.CancelledError:
                pass
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        try:
            await save_bot_state()
            await close_database()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {e}")

async def get_user_telethon_client(user_id: int) -> Optional[TelegramClient]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ Telethon –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        session_data = await db.load_user_session(user_id)
        client_config = session_data.get('client_config')
        
        if not client_config:
            logger.debug(f"–ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return None
            
        if not all(key in client_config for key in ['api_id', 'api_hash', 'phone']):
            logger.debug(f"–ù–µ–ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ api_id —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
        try:
            api_id = int(client_config['api_id'])
        except (ValueError, TypeError):
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return None
            
        session_file = f'user_session_{user_id}'
        loop = asyncio.get_event_loop()
        
        client = TelegramClient(
            session_file,
            api_id,
            client_config['api_hash'],
            loop=loop,
            timeout=30,
            retry_delay=1,
            flood_sleep_threshold=60
        )
        
        await client.connect()
        
        if await client.is_user_authorized():
            return client
        else:
            await client.disconnect()
            logger.debug(f"–ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None

async def set_user_telethon_client(user_id: int, client: TelegramClient):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Telethon –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        session_data = await db.load_user_session(user_id)
        session_data['has_active_client'] = True
        await db.save_user_session(user_id, session_data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def remove_user_telethon_client(user_id: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ Telethon –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        client = await get_user_telethon_client(user_id)
        if client:
            try:
                if client.is_connected():
                    await client.disconnect()
            except:
                pass
        
        session_data = await db.load_user_session(user_id)
        session_data['has_active_client'] = False
        session_data.pop('client_config', None)
        await db.save_user_session(user_id, session_data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def start_user_services(user_id: int):
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if user_id not in user_sessions_cache:
            logger.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return
            
        user_session = user_sessions_cache[user_id]
        client_config = user_session.get('client_config', {})
        
        if not client_config or not all(client_config.get(field) for field in ['api_id', 'api_hash', 'phone']):
            logger.error(f"–ù–µ–ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        client = await get_user_telethon_client(user_id)
        if not client:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ
        user_settings = user_session.get('settings', bot_data['settings'])
        
        try:
            import channel_search_engine
            await channel_search_engine.start_search(user_settings, client, user_id)
            logger.info(f"–ü–æ–∏—Å–∫–æ–≤–∏–∫ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        try:
            import masslooker
            asyncio.create_task(masslooker.start_masslooking(client, user_settings, user_id))
            logger.info(f"–ú–∞—Å—Å–ª—É–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞—Å—Å–ª—É–∫–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        # –ù–ï –æ—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∑–¥–µ—Å—å, –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def get_user_telethon_client(user_id: int) -> Optional[TelegramClient]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ Telethon –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if user_id not in user_sessions_cache:
            logger.debug(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ –≤ –∫–µ—à–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return None
            
        session_data = user_sessions_cache[user_id]
        client_config = session_data.get('client_config')
        
        if not client_config:
            logger.debug(f"–ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return None
            
        if not all(key in client_config for key in ['api_id', 'api_hash', 'phone']):
            logger.debug(f"–ù–µ–ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ api_id —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
        try:
            api_id = int(client_config['api_id'])
        except (ValueError, TypeError):
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return None
            
        session_file = f'user_session_{user_id}'
        loop = asyncio.get_event_loop()
        
        client = TelegramClient(
            session_file,
            api_id,
            client_config['api_hash'],
            loop=loop,
            timeout=30,
            retry_delay=1,
            flood_sleep_threshold=60
        )
        
        await client.connect()
        
        if await client.is_user_authorized():
            logger.info(f"–ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ–∑–¥–∞–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return client
        else:
            await client.disconnect()
            logger.debug(f"–ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None

async def stop_user_services(user_id: int):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        import channel_search_engine
        await channel_search_engine.stop_search(user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
    try:
        import masslooker
        await masslooker.stop_masslooking(user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞—Å—Å–ª—É–∫–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

if __name__ == "__main__":
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    import sys
    if len(sys.argv) > 1:
        main(sys.argv[1])
    else:
        print("–£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç")
        print("–ü—Ä–∏–º–µ—Ä: python bot_interface.py YOUR_BOT_TOKEN")